
Proyecto2_servos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001090  00001124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00001126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001198  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d9  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9a  00000000  00000000  00002d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f13  00000000  00000000  000038b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  000047c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b6  00000000  00000000  000052ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000063a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e9       	ldi	r30, 0x90	; 144
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 31       	cpi	r26, 0x16	; 22
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
      9e:	0c 94 46 08 	jmp	0x108c	; 0x108c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	10 82       	st	Z, r1
      ac:	80 81       	ld	r24, Z
      ae:	80 64       	ori	r24, 0x40	; 64
      b0:	80 83       	st	Z, r24
      b2:	80 81       	ld	r24, Z
      b4:	8f 77       	andi	r24, 0x7F	; 127
      b6:	80 83       	st	Z, r24
      b8:	80 81       	ld	r24, Z
      ba:	80 62       	ori	r24, 0x20	; 32
      bc:	80 83       	st	Z, r24
      be:	ea e7       	ldi	r30, 0x7A	; 122
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	80 81       	ld	r24, Z
      c6:	80 68       	ori	r24, 0x80	; 128
      c8:	80 83       	st	Z, r24
      ca:	80 81       	ld	r24, Z
      cc:	88 60       	ori	r24, 0x08	; 8
      ce:	80 83       	st	Z, r24
      d0:	80 81       	ld	r24, Z
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	80 83       	st	Z, r24
      d6:	80 81       	ld	r24, Z
      d8:	82 60       	ori	r24, 0x02	; 2
      da:	80 83       	st	Z, r24
      dc:	80 81       	ld	r24, Z
      de:	84 60       	ori	r24, 0x04	; 4
      e0:	80 83       	st	Z, r24
      e2:	ee e7       	ldi	r30, 0x7E	; 126
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	80 83       	st	Z, r24
      ec:	80 81       	ld	r24, Z
      ee:	82 60       	ori	r24, 0x02	; 2
      f0:	80 83       	st	Z, r24
      f2:	80 81       	ld	r24, Z
      f4:	84 60       	ori	r24, 0x04	; 4
      f6:	80 83       	st	Z, r24
      f8:	80 81       	ld	r24, Z
      fa:	88 60       	ori	r24, 0x08	; 8
      fc:	80 83       	st	Z, r24
      fe:	08 95       	ret

00000100 <ADC_CONVERT>:
     100:	ec e7       	ldi	r30, 0x7C	; 124
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	90 81       	ld	r25, Z
     106:	90 7f       	andi	r25, 0xF0	; 240
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
     10c:	ea e7       	ldi	r30, 0x7A	; 122
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	80 64       	ori	r24, 0x40	; 64
     114:	80 83       	st	Z, r24
     116:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     11a:	86 fd       	sbrc	r24, 6
     11c:	fc cf       	rjmp	.-8      	; 0x116 <ADC_CONVERT+0x16>
     11e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     122:	08 95       	ret

00000124 <INT0_ISR>:
	PCICR |= (1<<PCIE2);
}

//-->Configuración de entradas generales
void setup (void){
	DDRC = 0;		// PUERTO C COMO ENTRADA
     124:	83 e0       	ldi	r24, 0x03	; 3
     126:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	8d bb       	out	0x1d, r24	; 29
     12e:	84 b1       	in	r24, 0x04	; 4
     130:	81 61       	ori	r24, 0x11	; 17
     132:	84 b9       	out	0x04, r24	; 4
     134:	85 b1       	in	r24, 0x05	; 5
     136:	85 b9       	out	0x05, r24	; 5
     138:	8a b1       	in	r24, 0x0a	; 10
     13a:	80 68       	ori	r24, 0x80	; 128
     13c:	8a b9       	out	0x0a, r24	; 10
     13e:	85 b1       	in	r24, 0x05	; 5
     140:	8f 77       	andi	r24, 0x7F	; 127
     142:	85 b9       	out	0x05, r24	; 5
     144:	8a b1       	in	r24, 0x0a	; 10
     146:	8b 7f       	andi	r24, 0xFB	; 251
     148:	8a b9       	out	0x0a, r24	; 10
     14a:	8b b1       	in	r24, 0x0b	; 11
     14c:	84 60       	ori	r24, 0x04	; 4
     14e:	8b b9       	out	0x0b, r24	; 11
     150:	08 95       	ret

00000152 <INT_PCINT2>:
     152:	8a b1       	in	r24, 0x0a	; 10
     154:	87 7f       	andi	r24, 0xF7	; 247
     156:	8a b9       	out	0x0a, r24	; 10
     158:	8a b1       	in	r24, 0x0a	; 10
     15a:	8f 7d       	andi	r24, 0xDF	; 223
     15c:	8a b9       	out	0x0a, r24	; 10
     15e:	8b b1       	in	r24, 0x0b	; 11
     160:	88 62       	ori	r24, 0x28	; 40
     162:	8b b9       	out	0x0b, r24	; 11
     164:	ed e6       	ldi	r30, 0x6D	; 109
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	88 62       	ori	r24, 0x28	; 40
     16c:	80 83       	st	Z, r24
     16e:	e8 e6       	ldi	r30, 0x68	; 104
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	84 60       	ori	r24, 0x04	; 4
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <entradas_ADC>:
	
}

//-->Se define la función de las entradas de ADC y modificación de servomotores
void entradas_ADC(void){
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
	DutyC1 = ADC_CONVERT(7);	//Se lee el canal AD7 
     182:	87 e0       	ldi	r24, 0x07	; 7
     184:	0e 94 80 00 	call	0x100	; 0x100 <ADC_CONVERT>
     188:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <DutyC1>
	updateDutyCA1(DutyC1);		//Se envia los datos al servo 1 -- PWM1 Canal A
     18c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <updateDutyCA1>
	ADMUX &= 0xF0;
     190:	cc e7       	ldi	r28, 0x7C	; 124
     192:	d0 e0       	ldi	r29, 0x00	; 0
     194:	88 81       	ld	r24, Y
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);	//Se multiplexea para ADC7
     19a:	88 81       	ld	r24, Y
     19c:	87 60       	ori	r24, 0x07	; 7
     19e:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);		//Se inicia nuevamente el ADC
     1a0:	0a e7       	ldi	r16, 0x7A	; 122
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	f8 01       	movw	r30, r16
     1a6:	80 81       	ld	r24, Z
     1a8:	80 64       	ori	r24, 0x40	; 64
     1aa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	8f e3       	ldi	r24, 0x3F	; 63
     1ae:	9c e9       	ldi	r25, 0x9C	; 156
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <entradas_ADC+0x36>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <entradas_ADC+0x3c>
     1b6:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC2 = ADC_CONVERT(6);	//Se lee el canal AD6 
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	0e 94 80 00 	call	0x100	; 0x100 <ADC_CONVERT>
     1be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <DutyC2>
	updateDutyCA2(DutyC2);		//Se envia los datos al servo 2 -- PWM2 Canal A	
     1c2:	0e 94 d2 05 	call	0xba4	; 0xba4 <updateDutyCA2>
	ADMUX &= 0xF0;
     1c6:	88 81       	ld	r24, Y
     1c8:	80 7f       	andi	r24, 0xF0	; 240
     1ca:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);	//Se multiplexea para ADC6
     1cc:	88 81       	ld	r24, Y
     1ce:	86 60       	ori	r24, 0x06	; 6
     1d0:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);		//Se inicia nuevamente el ADC
     1d2:	f8 01       	movw	r30, r16
     1d4:	80 81       	ld	r24, Z
     1d6:	80 64       	ori	r24, 0x40	; 64
     1d8:	80 83       	st	Z, r24
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	9c e9       	ldi	r25, 0x9C	; 156
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <entradas_ADC+0x64>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <entradas_ADC+0x6a>
     1e4:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC3 = ADC_CONVERT(5);	//Se lee el canal AD5 
     1e6:	85 e0       	ldi	r24, 0x05	; 5
     1e8:	0e 94 80 00 	call	0x100	; 0x100 <ADC_CONVERT>
     1ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <DutyC3>
	updateDutyCB1(DutyC3);		//Se envia los datos al servo 3 -- PWM1 Canal B	
     1f0:	0e 94 19 05 	call	0xa32	; 0xa32 <updateDutyCB1>
	ADMUX &= 0xF0;
     1f4:	88 81       	ld	r24, Y
     1f6:	80 7f       	andi	r24, 0xF0	; 240
     1f8:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0);	//Se multiplexea para ADC5
     1fa:	88 81       	ld	r24, Y
     1fc:	85 60       	ori	r24, 0x05	; 5
     1fe:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);		//Se inicia nuevamente el ADC
     200:	f8 01       	movw	r30, r16
     202:	80 81       	ld	r24, Z
     204:	80 64       	ori	r24, 0x40	; 64
     206:	80 83       	st	Z, r24
     208:	8f e3       	ldi	r24, 0x3F	; 63
     20a:	9c e9       	ldi	r25, 0x9C	; 156
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <entradas_ADC+0x92>
     210:	00 c0       	rjmp	.+0      	; 0x212 <entradas_ADC+0x98>
     212:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC4 = ADC_CONVERT(4);	//Se lee el canal AD4 
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	0e 94 80 00 	call	0x100	; 0x100 <ADC_CONVERT>
     21a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <DutyC4>
	updateDutyCycleA(DutyC4);	//Se envia los datos al servo 4 -- PWM0 Canal A	
     21e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <updateDutyCycleA>
	ADMUX &= 0xF0;
     222:	88 81       	ld	r24, Y
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(0<<MUX0);	//Se multiplexea para ADC4
     228:	88 81       	ld	r24, Y
     22a:	84 60       	ori	r24, 0x04	; 4
     22c:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);		//Se inicia nuevamente el ADC
     22e:	f8 01       	movw	r30, r16
     230:	80 81       	ld	r24, Z
     232:	80 64       	ori	r24, 0x40	; 64
     234:	80 83       	st	Z, r24
     236:	8f e3       	ldi	r24, 0x3F	; 63
     238:	9c e9       	ldi	r25, 0x9C	; 156
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <entradas_ADC+0xc0>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <entradas_ADC+0xc6>
     240:	00 00       	nop
	_delay_ms(10);
}
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	08 95       	ret

0000024c <conf_servos>:

//--> Configuración de la función de EEPROM/SERVOMOTORES
void conf_servos(uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4){
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	16 2f       	mov	r17, r22
     254:	d4 2f       	mov	r29, r20
     256:	c2 2f       	mov	r28, r18
	updateDutyCA1(m1);		//Actualiza el servomotor 1
     258:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <updateDutyCA1>
     25c:	8f e3       	ldi	r24, 0x3F	; 63
     25e:	9c e9       	ldi	r25, 0x9C	; 156
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <conf_servos+0x14>
     264:	00 c0       	rjmp	.+0      	; 0x266 <conf_servos+0x1a>
     266:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCA2(m2);		//Actualiza el servomotor 2
     268:	81 2f       	mov	r24, r17
     26a:	0e 94 d2 05 	call	0xba4	; 0xba4 <updateDutyCA2>
     26e:	8f e3       	ldi	r24, 0x3F	; 63
     270:	9c e9       	ldi	r25, 0x9C	; 156
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <conf_servos+0x26>
     276:	00 c0       	rjmp	.+0      	; 0x278 <conf_servos+0x2c>
     278:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCB1(m3);		//Actualiza el servomotor 3
     27a:	8d 2f       	mov	r24, r29
     27c:	0e 94 19 05 	call	0xa32	; 0xa32 <updateDutyCB1>
     280:	8f e3       	ldi	r24, 0x3F	; 63
     282:	9c e9       	ldi	r25, 0x9C	; 156
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <conf_servos+0x38>
     288:	00 c0       	rjmp	.+0      	; 0x28a <conf_servos+0x3e>
     28a:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCycleA(m4);	//Actualiza el servomotor 4
     28c:	8c 2f       	mov	r24, r28
     28e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <updateDutyCycleA>
     292:	8f e3       	ldi	r24, 0x3F	; 63
     294:	9c e9       	ldi	r25, 0x9C	; 156
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <conf_servos+0x4a>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <conf_servos+0x50>
     29c:	00 00       	nop
	_delay_ms(10);
	
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	08 95       	ret

000002a6 <main>:
volatile uint8_t servo4_MA = 0; // Valor de servo 4 cuando se conecta a ADAFRUIT/NUBE
volatile uint8_t RX_READ; // Valor de RX cuando se lee
volatile uint8_t RX_WRITE; // Valor de RX cuando se escribe

int main(void){
	cli();			//Se desactivan las interupcciones Globales
     2a6:	f8 94       	cli
	
	//Configuración Inicial de los Timers
	
	//->Configuración TIMER1<-//
	//-->Configurar TCCR1A y TCCR1B en 0
	TCCR1A = 0;
     2a8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
     2ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//->Configuración TIMER2<-//
	//-->Configurar TCCR2A y TCCR2B en 0
	TCCR2A = 0;
     2b0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
     2b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//->Configuración TIMER0<-//
	//-->Configurar TCCR0A y TCCR0B en 0
	TCCR0A = 0;
     2b8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
     2ba:	15 bc       	out	0x25, r1	; 37

	initADC();			//Configuración del ADC
     2bc:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initUART9600();		//Configuración del USART
     2c0:	0e 94 08 06 	call	0xc10	; 0xc10 <initUART9600>
	
	//Configuración del PWM//
	
	//--> TIMER1
	initPWM1A(no_invertido,8,39999);
     2c4:	4f e3       	ldi	r20, 0x3F	; 63
     2c6:	5c e9       	ldi	r21, 0x9C	; 156
     2c8:	68 e0       	ldi	r22, 0x08	; 8
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 87 04 	call	0x90e	; 0x90e <initPWM1A>
	initPWM2A(no_invertido,1024);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	74 e0       	ldi	r23, 0x04	; 4
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 b0 05 	call	0xb60	; 0xb60 <initPWM2A>
	
	//--> TIMER 2
	initPWM1B(no_invertido,8,39999);
     2dc:	4f e3       	ldi	r20, 0x3F	; 63
     2de:	5c e9       	ldi	r21, 0x9C	; 156
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 b4 04 	call	0x968	; 0x968 <initPWM1B>
	
	//--> TIMER 0
	initPWM0FastA(no_invertido, 1024);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	74 e0       	ldi	r23, 0x04	; 4
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <initPWM0FastA>

	//--> Configuración de las interrupciones
	INT0_ISR();		//Función de la interrupción INT0 -- PD2
     2f4:	0e 94 92 00 	call	0x124	; 0x124 <INT0_ISR>
	INT_PCINT2();	//Función de la interrupción PCINT2 -- PD3 y PD5
     2f8:	0e 94 a9 00 	call	0x152	; 0x152 <INT_PCINT2>
	
	sei();		//Se activan las interupcciones Globales
     2fc:	78 94       	sei
	
	while (1) {							//6 = 0°  36 = 180°   21 = 90°
		
		if (estado == 0){				//Estado 0 -- Modo manual 1 
     2fe:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <estado>
     302:	81 11       	cpse	r24, r1
     304:	0c c0       	rjmp	.+24     	; 0x31e <main+0x78>
										//-->Escribir EEPROM  -- Posición 1 y 2
			// -> LEDS					
			PORTB |= (1<<DDB4);		//Se enciende la led 1 - PB4
     306:	85 b1       	in	r24, 0x05	; 5
     308:	80 61       	ori	r24, 0x10	; 16
     30a:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<DDB0);	//Se apaga la led 2 - PB0
     30c:	85 b1       	in	r24, 0x05	; 5
     30e:	8e 7f       	andi	r24, 0xFE	; 254
     310:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<DDD7);	//Se apaga la led 3 - PD7
     312:	8b b1       	in	r24, 0x0b	; 11
     314:	8f 77       	andi	r24, 0x7F	; 127
     316:	8b b9       	out	0x0b, r24	; 11
			
			entradas_ADC();			//Se llama a la función de los servos - manuales
     318:	0e 94 bd 00 	call	0x17a	; 0x17a <entradas_ADC>
     31c:	f0 cf       	rjmp	.-32     	; 0x2fe <main+0x58>

		}
		else if (estado == 1){			//Estado 1 -- Modo manual 2
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	31 f4       	brne	.+12     	; 0x32e <main+0x88>
										//-->Escribir EEPROM  -- Posición 3 y 4
			// -> LEDS
			PORTD |= (1<<DDD7);		//Se enciende la led 3 - PD7
     322:	8b b1       	in	r24, 0x0b	; 11
     324:	80 68       	ori	r24, 0x80	; 128
     326:	8b b9       	out	0x0b, r24	; 11
			
			entradas_ADC();			//Se llama a la función de los servos - manuales
     328:	0e 94 bd 00 	call	0x17a	; 0x17a <entradas_ADC>
     32c:	e8 cf       	rjmp	.-48     	; 0x2fe <main+0x58>

		}
				
		else if (estado == 2){		//Estado 2 -- Lectura de EEPROM Posición 1 y 2
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	51 f4       	brne	.+20     	; 0x346 <main+0xa0>
			// -> LEDS
			PORTB |= (1<<DDB0);		//Se enciende la led 2 - PB0
     332:	85 b1       	in	r24, 0x05	; 5
     334:	81 60       	ori	r24, 0x01	; 1
     336:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<DDB4);	//Se apaga la led 1 - PB4
     338:	85 b1       	in	r24, 0x05	; 5
     33a:	8f 7e       	andi	r24, 0xEF	; 239
     33c:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<DDD7);	//Se apaga la led 3 - PD7
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	8f 77       	andi	r24, 0x7F	; 127
     342:	8b b9       	out	0x0b, r24	; 11
     344:	dc cf       	rjmp	.-72     	; 0x2fe <main+0x58>
			
		}
		else if (estado == 3){		//Estado 3 -- Lectura de EEPROM Posición 3 y 4
     346:	83 30       	cpi	r24, 0x03	; 3
     348:	39 f4       	brne	.+14     	; 0x358 <main+0xb2>
			// -> LEDS
			PORTD |= (1<<DDD7);		//Se enciende la led 3 - PD7
     34a:	8b b1       	in	r24, 0x0b	; 11
     34c:	80 68       	ori	r24, 0x80	; 128
     34e:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1<<DDB0);	//Se apaga la led 2 - PB0
     350:	85 b1       	in	r24, 0x05	; 5
     352:	8e 7f       	andi	r24, 0xFE	; 254
     354:	85 b9       	out	0x05, r24	; 5
     356:	d3 cf       	rjmp	.-90     	; 0x2fe <main+0x58>

		}
		else {						//Estado 4 -- Comunicación ADAFRUIT_IO
			// -> LEDS
			PORTB |= (1<<DDB0);		//Se enciende la led 2 - PB0
     358:	85 b1       	in	r24, 0x05	; 5
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	85 b9       	out	0x05, r24	; 5
			
			//--> Se llama a la función para configurar los servos
			conf_servos(servo1_MA, servo2_MA, servo3_MA, servo4_MA);
     35e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
     362:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <servo3_MA>
     366:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo2_MA>
     36a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servo1_MA>
     36e:	0e 94 26 01 	call	0x24c	; 0x24c <conf_servos>
     372:	c5 cf       	rjmp	.-118    	; 0x2fe <main+0x58>

00000374 <__vector_1>:


//Configuración Vectores de interrupción

//--> Vector de interrupcion Externo INT0
ISR(INT0_vect){
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	8f 93       	push	r24
	estado++;		  //Se usa la variable "estado" como contador de los modos
     380:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <estado>
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <estado>
	if(estado == 5){
     38a:	85 30       	cpi	r24, 0x05	; 5
     38c:	11 f4       	brne	.+4      	; 0x392 <__vector_1+0x1e>
		estado = 0;	  //Al llegar a 5 el contador, este se reinicia a 0--> Estado 0
     38e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <estado>
	}
}
     392:	8f 91       	pop	r24
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_5>:

//--> Vector de interrupcion PCINT2
ISR(PCINT2_vect){
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	1f 93       	push	r17
     3aa:	2f 93       	push	r18
     3ac:	3f 93       	push	r19
     3ae:	4f 93       	push	r20
     3b0:	5f 93       	push	r21
     3b2:	6f 93       	push	r22
     3b4:	7f 93       	push	r23
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
     3ba:	af 93       	push	r26
     3bc:	bf 93       	push	r27
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ef 93       	push	r30
     3c4:	ff 93       	push	r31
	if (estado == 0){				//Guarda la posición 1 y 2 en la EEPROM
     3c6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <estado>
     3ca:	81 11       	cpse	r24, r1
     3cc:	35 c0       	rjmp	.+106    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		if((PIND & (1<<PIND3))==0){						//--> Posición 1	
     3ce:	4b 99       	sbic	0x09, 3	; 9
     3d0:	18 c0       	rjmp	.+48     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			eeprom_write_byte((uint8_t*)0x00, DutyC1);
     3d2:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <DutyC1>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x01, DutyC2);
     3de:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <DutyC2>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x02, DutyC3);
     3ea:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <DutyC3>
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x03, DutyC4);
     3f6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <DutyC4>
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
		}  //eSPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){						//--> Posición 2
     402:	4d 99       	sbic	0x09, 5	; 9
     404:	e3 c0       	rjmp	.+454    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
			eeprom_write_byte((uint8_t*)0x04, DutyC1);
     406:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <DutyC1>
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x05, DutyC2);
     412:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <DutyC2>
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x06, DutyC3);
     41e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <DutyC3>
     422:	86 e0       	ldi	r24, 0x06	; 6
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x07, DutyC4);
     42a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <DutyC4>
     42e:	87 e0       	ldi	r24, 0x07	; 7
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
     436:	ca c0       	rjmp	.+404    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	} 
	else if (estado == 1){				//Guarda la posición 3 y 4 en la EEPROM
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	a9 f5       	brne	.+106    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		if((PIND & (1<<PIND3))==0){						//--> Posición 3
     43c:	4b 99       	sbic	0x09, 3	; 9
     43e:	18 c0       	rjmp	.+48     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			eeprom_write_byte((uint8_t*)0x08, DutyC1);
     440:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <DutyC1>
     444:	88 e0       	ldi	r24, 0x08	; 8
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x09, DutyC2);
     44c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <DutyC2>
     450:	89 e0       	ldi	r24, 0x09	; 9
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0A, DutyC3);
     458:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <DutyC3>
     45c:	8a e0       	ldi	r24, 0x0A	; 10
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0B, DutyC4);
     464:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <DutyC4>
     468:	8b e0       	ldi	r24, 0x0B	; 11
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
		} //eSPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){						//--> Posición 4
     470:	4d 99       	sbic	0x09, 5	; 9
     472:	ac c0       	rjmp	.+344    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
			eeprom_write_byte((uint8_t*)0x0C, DutyC1);
     474:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <DutyC1>
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0D, DutyC2);
     480:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <DutyC2>
     484:	8d e0       	ldi	r24, 0x0D	; 13
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0E, DutyC3);
     48c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <DutyC3>
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0F, DutyC4);
     498:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <DutyC4>
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 38 08 	call	0x1070	; 0x1070 <eeprom_write_byte>
     4a4:	93 c0       	rjmp	.+294    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
	}
	else if (estado == 2){				//Realiza la posición 1 y 2 gurdada en la EEPROM
     4a6:	82 30       	cpi	r24, 0x02	; 2
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4aa:	47 c0       	rjmp	.+142    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
		if((PIND & (1<<PIND3))==0){						//--> Posición 1
     4ac:	4b 99       	sbic	0x09, 3	; 9
     4ae:	21 c0       	rjmp	.+66     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
			//_delay_ms(10);
			servo1 = eeprom_read_byte((uint8_t*)0x00);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     4b8:	c8 2f       	mov	r28, r24
     4ba:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x01);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     4c6:	d8 2f       	mov	r29, r24
     4c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x02);
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     4d4:	18 2f       	mov	r17, r24
     4d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x03);
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     4e2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo4>
			
			//-->Se llama a la función para configurar los servos
			conf_servos(servo1, servo2, servo3, servo4); 
     4e6:	28 2f       	mov	r18, r24
     4e8:	41 2f       	mov	r20, r17
     4ea:	6d 2f       	mov	r22, r29
     4ec:	8c 2f       	mov	r24, r28
     4ee:	0e 94 26 01 	call	0x24c	; 0x24c <conf_servos>
			
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){						//--> Posición 2
     4f2:	4d 99       	sbic	0x09, 5	; 9
     4f4:	6b c0       	rjmp	.+214    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
			//_delay_ms(10);
			servo1 = eeprom_read_byte((uint8_t*)0x04);
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     4fe:	c8 2f       	mov	r28, r24
     500:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x05);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     50c:	d8 2f       	mov	r29, r24
     50e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x06);
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     51a:	18 2f       	mov	r17, r24
     51c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x07);
     520:	87 e0       	ldi	r24, 0x07	; 7
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     528:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo4>
			
			//-->Se llama a la función para configurar los servos
			conf_servos(servo1, servo2, servo3, servo4);
     52c:	28 2f       	mov	r18, r24
     52e:	41 2f       	mov	r20, r17
     530:	6d 2f       	mov	r22, r29
     532:	8c 2f       	mov	r24, r28
     534:	0e 94 26 01 	call	0x24c	; 0x24c <conf_servos>
     538:	49 c0       	rjmp	.+146    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		}//ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	}
	else if (estado == 3){					//Realiza la posición 3 y 4 gurdada en la EEPROM
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	09 f0       	breq	.+2      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     53e:	46 c0       	rjmp	.+140    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		if((PIND & (1<<PIND3))==0){							//--> Posición 3
     540:	4b 99       	sbic	0x09, 3	; 9
     542:	21 c0       	rjmp	.+66     	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
			servo1 = eeprom_read_byte((uint8_t*)0x08);
     544:	88 e0       	ldi	r24, 0x08	; 8
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     54c:	c8 2f       	mov	r28, r24
     54e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x09);
     552:	89 e0       	ldi	r24, 0x09	; 9
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     55a:	d8 2f       	mov	r29, r24
     55c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x0A);
     560:	8a e0       	ldi	r24, 0x0A	; 10
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     568:	18 2f       	mov	r17, r24
     56a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x0B);
     56e:	8b e0       	ldi	r24, 0x0B	; 11
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     576:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo4>
			
			//-->Se llama a la función para configurar los servos
			conf_servos(servo1, servo2, servo3, servo4);
     57a:	28 2f       	mov	r18, r24
     57c:	41 2f       	mov	r20, r17
     57e:	6d 2f       	mov	r22, r29
     580:	8c 2f       	mov	r24, r28
     582:	0e 94 26 01 	call	0x24c	; 0x24c <conf_servos>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){							//--> Posición 4
     586:	4d 99       	sbic	0x09, 5	; 9
     588:	21 c0       	rjmp	.+66     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
			servo1 = eeprom_read_byte((uint8_t*)0x0C);
     58a:	8c e0       	ldi	r24, 0x0C	; 12
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     592:	c8 2f       	mov	r28, r24
     594:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x0D);
     598:	8d e0       	ldi	r24, 0x0D	; 13
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     5a0:	d8 2f       	mov	r29, r24
     5a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x0E);
     5a6:	8e e0       	ldi	r24, 0x0E	; 14
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     5ae:	18 2f       	mov	r17, r24
     5b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x0F);
     5b4:	8f e0       	ldi	r24, 0x0F	; 15
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 30 08 	call	0x1060	; 0x1060 <eeprom_read_byte>
     5bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo4>
			
			//-->Se llama a la función para configurar los servos
			conf_servos(servo1, servo2, servo3, servo4);
     5c0:	28 2f       	mov	r18, r24
     5c2:	41 2f       	mov	r20, r17
     5c4:	6d 2f       	mov	r22, r29
     5c6:	8c 2f       	mov	r24, r28
     5c8:	0e 94 26 01 	call	0x24c	; 0x24c <conf_servos>
		}//ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	}
	else{
		//La interrupción no hace ninguna acción en este caso
	}
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	1f 91       	pop	r17
     5ea:	0f 90       	pop	r0
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	0f 90       	pop	r0
     5f0:	1f 90       	pop	r1
     5f2:	18 95       	reti

000005f4 <__vector_21>:

//--->Vector de interrupción ADC
ISR(ADC_vect){
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	8f 93       	push	r24
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//LIMPIA LA BANDERA
     604:	ea e7       	ldi	r30, 0x7A	; 122
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	80 61       	ori	r24, 0x10	; 16
     60c:	80 83       	st	Z, r24
}
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	8f 91       	pop	r24
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <__vector_18>:

//---->Vector de  interrupción de USART
ISR(USART_RX_vect){
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
	RX_READ = UDR0;			//Posición temporal para el valor leido
     630:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     634:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <RX_READ>
	switch(ADAFRUIT_IO){
     638:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	89 f0       	breq	.+34     	; 0x662 <__vector_18+0x44>
     640:	18 f4       	brcc	.+6      	; 0x648 <__vector_18+0x2a>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	31 f0       	breq	.+12     	; 0x652 <__vector_18+0x34>
     646:	54 c0       	rjmp	.+168    	; 0x6f0 <__vector_18+0xd2>
     648:	83 30       	cpi	r24, 0x03	; 3
     64a:	d1 f0       	breq	.+52     	; 0x680 <__vector_18+0x62>
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	41 f1       	breq	.+80     	; 0x6a0 <__vector_18+0x82>
     650:	4f c0       	rjmp	.+158    	; 0x6f0 <__vector_18+0xd2>
		case 1:				// El primero es un char de 1 a 4
		CANAL_AD = RX_READ; //De 1 a 4
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <RX_READ>
     656:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <CANAL_AD>
		ADAFRUIT_IO +=1;
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
     660:	47 c0       	rjmp	.+142    	; 0x6f0 <__vector_18+0xd2>
		
		case 2:				//El 2do es Centenas
		CE = 100*(((uint8_t) RX_READ) - 48);
     662:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <RX_READ>
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	20 53       	subi	r18, 0x30	; 48
     66a:	31 09       	sbc	r19, r1
     66c:	94 e6       	ldi	r25, 0x64	; 100
     66e:	29 9f       	mul	r18, r25
     670:	20 2d       	mov	r18, r0
     672:	11 24       	eor	r1, r1
     674:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <CE>
		ADAFRUIT_IO += 1;
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
     67e:	38 c0       	rjmp	.+112    	; 0x6f0 <__vector_18+0xd2>
		
		case 3:				//El 3ro es Decenas
		DE = 10*(((uint8_t) RX_READ) - 48);
     680:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <RX_READ>
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	20 53       	subi	r18, 0x30	; 48
     688:	31 09       	sbc	r19, r1
     68a:	22 0f       	add	r18, r18
     68c:	92 2f       	mov	r25, r18
     68e:	99 0f       	add	r25, r25
     690:	99 0f       	add	r25, r25
     692:	29 0f       	add	r18, r25
     694:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <DE>
		ADAFRUIT_IO += 1;
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
     69e:	28 c0       	rjmp	.+80     	; 0x6f0 <__vector_18+0xd2>
		
		case 4:				//El 4to es Unidades
		UN = ((uint8_t) RX_READ) - 48;
     6a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <RX_READ>
     6a4:	80 53       	subi	r24, 0x30	; 48
     6a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <UN>
		ADA_Value = CE+DE+UN; //Suma de transmisiones
     6aa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <CE>
     6ae:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <DE>
     6b2:	92 0f       	add	r25, r18
     6b4:	89 0f       	add	r24, r25
     6b6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ADA_Value>
		switch (CANAL_AD)
     6ba:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <CANAL_AD>
     6be:	92 33       	cpi	r25, 0x32	; 50
     6c0:	61 f0       	breq	.+24     	; 0x6da <__vector_18+0xbc>
     6c2:	18 f4       	brcc	.+6      	; 0x6ca <__vector_18+0xac>
     6c4:	91 33       	cpi	r25, 0x31	; 49
     6c6:	31 f0       	breq	.+12     	; 0x6d4 <__vector_18+0xb6>
     6c8:	10 c0       	rjmp	.+32     	; 0x6ea <__vector_18+0xcc>
     6ca:	93 33       	cpi	r25, 0x33	; 51
     6cc:	49 f0       	breq	.+18     	; 0x6e0 <__vector_18+0xc2>
     6ce:	94 33       	cpi	r25, 0x34	; 52
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <__vector_18+0xc8>
     6d2:	0b c0       	rjmp	.+22     	; 0x6ea <__vector_18+0xcc>
		{ //Dependiendo de a que le estoy enviando el valor, modifica el valor del servo
			case '1':
			servo1_MA = ADA_Value;		//El valor de ADAFRUIT se almacena en el servo_1
     6d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servo1_MA>
			break;
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <__vector_18+0xcc>
			
			case '2':
			servo2_MA = ADA_Value;		//El valor de ADAFRUIT se almacena en el servo_2	
     6da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo2_MA>
			break;
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <__vector_18+0xcc>
			
			case '3':
			servo3_MA = ADA_Value;		//El valor de ADAFRUIT se almacena en el servo_3
     6e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo3_MA>
			break;
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__vector_18+0xcc>
			
			case '4':
			servo4_MA = ADA_Value;		//El valor de ADAFRUIT se almacena en el servo_1
     6e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			break;
			
		}// Switch de los canales
		ADAFRUIT_IO = 1;		//Se establece en 1
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
		
	}//Switch --> Estados del Adafruit
}
     6f0:	9f 91       	pop	r25
     6f2:	8f 91       	pop	r24
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <map2>:

//Se llama a la libreria donde se declararon los prototipos de función
#include "PWM0.h"			

//Configuración del mapeado del los servomotores
float map2(float x, float in_min, float in_max, float out_min, float out_max){
     702:	4f 92       	push	r4
     704:	5f 92       	push	r5
     706:	6f 92       	push	r6
     708:	7f 92       	push	r7
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	28 97       	sbiw	r28, 0x08	; 8
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	29 01       	movw	r4, r18
     730:	3a 01       	movw	r6, r20
     732:	ed 82       	std	Y+5, r14	; 0x05
     734:	fe 82       	std	Y+6, r15	; 0x06
     736:	0f 83       	std	Y+7, r16	; 0x07
     738:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
     73a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     73e:	69 83       	std	Y+1, r22	; 0x01
     740:	7a 83       	std	Y+2, r23	; 0x02
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	a6 01       	movw	r20, r12
     748:	95 01       	movw	r18, r10
     74a:	69 8d       	ldd	r22, Y+25	; 0x19
     74c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     74e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     750:	9c 8d       	ldd	r25, Y+28	; 0x1c
     752:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	69 81       	ldd	r22, Y+1	; 0x01
     75c:	7a 81       	ldd	r23, Y+2	; 0x02
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	9c 81       	ldd	r25, Y+4	; 0x04
     762:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     766:	69 83       	std	Y+1, r22	; 0x01
     768:	7a 83       	std	Y+2, r23	; 0x02
     76a:	8b 83       	std	Y+3, r24	; 0x03
     76c:	9c 83       	std	Y+4, r25	; 0x04
     76e:	a3 01       	movw	r20, r6
     770:	92 01       	movw	r18, r4
     772:	c8 01       	movw	r24, r16
     774:	b7 01       	movw	r22, r14
     776:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	69 81       	ldd	r22, Y+1	; 0x01
     780:	7a 81       	ldd	r23, Y+2	; 0x02
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	0e 94 94 06 	call	0xd28	; 0xd28 <__divsf3>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	c6 01       	movw	r24, r12
     790:	b5 01       	movw	r22, r10
     792:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>
}
     796:	28 96       	adiw	r28, 0x08	; 8
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	08 95       	ret

000007c0 <initPWM0FastA>:

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Definimos que el pin PD6 es una saldia (OC0A)  - NO INVERTIDA
	DDRD |= (1<<DDD6);
     7c0:	9a b1       	in	r25, 0x0a	; 10
     7c2:	90 64       	ori	r25, 0x40	; 64
     7c4:	9a b9       	out	0x0a, r25	; 10
	
	
	if(inverted){			
     7c6:	88 23       	and	r24, r24
     7c8:	21 f0       	breq	.+8      	; 0x7d2 <initPWM0FastA+0x12>
		//Configurando OC0A como INVERTIDO
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
     7ca:	84 b5       	in	r24, 0x24	; 36
     7cc:	80 6c       	ori	r24, 0xC0	; 192
     7ce:	84 bd       	out	0x24, r24	; 36
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <initPWM0FastA+0x18>
		}else{
		//Configurando OC0A como NO INVERTIDO
		TCCR0A |= (1<<COM0A1);
     7d2:	84 b5       	in	r24, 0x24	; 36
     7d4:	80 68       	ori	r24, 0x80	; 128
     7d6:	84 bd       	out	0x24, r24	; 36
	}
	
	//Definimos PWM modo FAST TOP = 0xFF (MAX) --- Es igual para ambos TCCR0A y TCCR0B
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
     7d8:	84 b5       	in	r24, 0x24	; 36
     7da:	83 60       	ori	r24, 0x03	; 3
     7dc:	84 bd       	out	0x24, r24	; 36
	
	//Seleccionamos el Prescaler de 1024
	TCCR0B |= (1<<CS02)|(1<<CS00);
     7de:	85 b5       	in	r24, 0x25	; 37
     7e0:	85 60       	ori	r24, 0x05	; 5
     7e2:	85 bd       	out	0x25, r24	; 37
     7e4:	08 95       	ret

000007e6 <updateDutyCycleA>:
}

//--> Se configura el ciclo de trabajo del canal A // PD6
void updateDutyCycleA(uint8_t duty){
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
	OCR0A = map2(duty,0,255,6,36);
     7f6:	68 2f       	mov	r22, r24
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 35 07 	call	0xe6a	; 0xe6a <__floatunsisf>
     802:	22 e4       	ldi	r18, 0x42	; 66
     804:	2f 93       	push	r18
     806:	20 e1       	ldi	r18, 0x10	; 16
     808:	2f 93       	push	r18
     80a:	1f 92       	push	r1
     80c:	1f 92       	push	r1
     80e:	0f 2e       	mov	r0, r31
     810:	a1 2c       	mov	r10, r1
     812:	b1 2c       	mov	r11, r1
     814:	f0 ec       	ldi	r31, 0xC0	; 192
     816:	cf 2e       	mov	r12, r31
     818:	f0 e4       	ldi	r31, 0x40	; 64
     81a:	df 2e       	mov	r13, r31
     81c:	f0 2d       	mov	r31, r0
     81e:	e1 2c       	mov	r14, r1
     820:	f1 2c       	mov	r15, r1
     822:	0f e7       	ldi	r16, 0x7F	; 127
     824:	13 e4       	ldi	r17, 0x43	; 67
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	0e 94 81 03 	call	0x702	; 0x702 <map2>
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     83c:	67 bd       	out	0x27, r22	; 39
}
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	08 95       	ret

00000850 <map>:

//Se llama a la libreria donde se declararon los prototipos de función
#include "PWM1.h"

//Configuración del mapeado del los servomotores
float map(float x, float in_min, float in_max, float out_min, float out_max){
     850:	4f 92       	push	r4
     852:	5f 92       	push	r5
     854:	6f 92       	push	r6
     856:	7f 92       	push	r7
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	28 97       	sbiw	r28, 0x08	; 8
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	29 01       	movw	r4, r18
     87e:	3a 01       	movw	r6, r20
     880:	ed 82       	std	Y+5, r14	; 0x05
     882:	fe 82       	std	Y+6, r15	; 0x06
     884:	0f 83       	std	Y+7, r16	; 0x07
     886:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
     888:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     88c:	69 83       	std	Y+1, r22	; 0x01
     88e:	7a 83       	std	Y+2, r23	; 0x02
     890:	8b 83       	std	Y+3, r24	; 0x03
     892:	9c 83       	std	Y+4, r25	; 0x04
     894:	a6 01       	movw	r20, r12
     896:	95 01       	movw	r18, r10
     898:	69 8d       	ldd	r22, Y+25	; 0x19
     89a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     89c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     89e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8a0:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	69 81       	ldd	r22, Y+1	; 0x01
     8aa:	7a 81       	ldd	r23, Y+2	; 0x02
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	9c 81       	ldd	r25, Y+4	; 0x04
     8b0:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     8b4:	69 83       	std	Y+1, r22	; 0x01
     8b6:	7a 83       	std	Y+2, r23	; 0x02
     8b8:	8b 83       	std	Y+3, r24	; 0x03
     8ba:	9c 83       	std	Y+4, r25	; 0x04
     8bc:	a3 01       	movw	r20, r6
     8be:	92 01       	movw	r18, r4
     8c0:	c8 01       	movw	r24, r16
     8c2:	b7 01       	movw	r22, r14
     8c4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	69 81       	ldd	r22, Y+1	; 0x01
     8ce:	7a 81       	ldd	r23, Y+2	; 0x02
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	9c 81       	ldd	r25, Y+4	; 0x04
     8d4:	0e 94 94 06 	call	0xd28	; 0xd28 <__divsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	c6 01       	movw	r24, r12
     8de:	b5 01       	movw	r22, r10
     8e0:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>
}
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	bf 90       	pop	r11
     902:	af 90       	pop	r10
     904:	7f 90       	pop	r7
     906:	6f 90       	pop	r6
     908:	5f 90       	pop	r5
     90a:	4f 90       	pop	r4
     90c:	08 95       	ret

0000090e <initPWM1A>:

void initPWM1A(uint8_t inverted, uint16_t prescaler, uint16_t top){
	//Definimos que el pin PB1 es una saldia (OC1A)  - NO INVERTIDA
	DDRB |= (1 << DDB1); 
     90e:	94 b1       	in	r25, 0x04	; 4
     910:	92 60       	ori	r25, 0x02	; 2
     912:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
     914:	e0 e8       	ldi	r30, 0x80	; 128
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	90 81       	ld	r25, Z
     91a:	92 60       	ori	r25, 0x02	; 2
     91c:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
     91e:	e1 e8       	ldi	r30, 0x81	; 129
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	90 81       	ld	r25, Z
     924:	98 61       	ori	r25, 0x18	; 24
     926:	90 83       	st	Z, r25
	ICR1 = top;
     928:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     92c:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
     930:	88 23       	and	r24, r24
     932:	31 f0       	breq	.+12     	; 0x940 <initPWM1A+0x32>
		TCCR1A |= (1 << COM1A1)|(1 << COM1A0);//PWM INVERTIDO
     934:	e0 e8       	ldi	r30, 0x80	; 128
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	80 6c       	ori	r24, 0xC0	; 192
     93c:	80 83       	st	Z, r24
     93e:	05 c0       	rjmp	.+10     	; 0x94a <initPWM1A+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1A1);//PWM NO INVERTIDO
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	80 68       	ori	r24, 0x80	; 128
     948:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
     94a:	68 30       	cpi	r22, 0x08	; 8
     94c:	71 05       	cpc	r23, r1
     94e:	31 f4       	brne	.+12     	; 0x95c <initPWM1A+0x4e>
		//Se define un prescaler de 8
		TCCR1B |= (1 << CS11);
     950:	e1 e8       	ldi	r30, 0x81	; 129
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	82 60       	ori	r24, 0x02	; 2
     958:	80 83       	st	Z, r24
     95a:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
     95c:	e1 e8       	ldi	r30, 0x81	; 129
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	84 60       	ori	r24, 0x04	; 4
     964:	80 83       	st	Z, r24
     966:	08 95       	ret

00000968 <initPWM1B>:
	}
}

void initPWM1B(uint8_t inverted, uint16_t prescaler, uint16_t top){
	//Definimos que el pin PB2 es una saldia (OC1B)  - NO INVERTIDA
	DDRB |= (1 << DDB2); 
     968:	94 b1       	in	r25, 0x04	; 4
     96a:	94 60       	ori	r25, 0x04	; 4
     96c:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
     96e:	e0 e8       	ldi	r30, 0x80	; 128
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	90 81       	ld	r25, Z
     974:	92 60       	ori	r25, 0x02	; 2
     976:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
     978:	e1 e8       	ldi	r30, 0x81	; 129
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	90 81       	ld	r25, Z
     97e:	98 61       	ori	r25, 0x18	; 24
     980:	90 83       	st	Z, r25
	ICR1 = top;
     982:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     986:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
     98a:	88 23       	and	r24, r24
     98c:	31 f0       	breq	.+12     	; 0x99a <initPWM1B+0x32>
		TCCR1A |= (1 << COM1B1)|(1 << COM1B0);//PWM INVERTIDO
     98e:	e0 e8       	ldi	r30, 0x80	; 128
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	80 63       	ori	r24, 0x30	; 48
     996:	80 83       	st	Z, r24
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <initPWM1B+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1B1);//PWM NO INVERTIDO
     99a:	e0 e8       	ldi	r30, 0x80	; 128
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	80 62       	ori	r24, 0x20	; 32
     9a2:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
     9a4:	68 30       	cpi	r22, 0x08	; 8
     9a6:	71 05       	cpc	r23, r1
     9a8:	31 f4       	brne	.+12     	; 0x9b6 <initPWM1B+0x4e>
		//Se define un prescaler de 8
		TCCR1B |= (1 << CS11);
     9aa:	e1 e8       	ldi	r30, 0x81	; 129
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	82 60       	ori	r24, 0x02	; 2
     9b2:	80 83       	st	Z, r24
     9b4:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
     9b6:	e1 e8       	ldi	r30, 0x81	; 129
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	84 60       	ori	r24, 0x04	; 4
     9be:	80 83       	st	Z, r24
     9c0:	08 95       	ret

000009c2 <updateDutyCA1>:
	}
}

//--> Se configura el ciclo de trabajo del canal A // PB1
void updateDutyCA1(uint8_t duty){   //--->900=0° 2800=90° 48000=180°
     9c2:	af 92       	push	r10
     9c4:	bf 92       	push	r11
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
	OCR1A = map(duty,0,255,900,4800);
     9d2:	68 2f       	mov	r22, r24
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 35 07 	call	0xe6a	; 0xe6a <__floatunsisf>
     9de:	25 e4       	ldi	r18, 0x45	; 69
     9e0:	2f 93       	push	r18
     9e2:	26 e9       	ldi	r18, 0x96	; 150
     9e4:	2f 93       	push	r18
     9e6:	1f 92       	push	r1
     9e8:	1f 92       	push	r1
     9ea:	0f 2e       	mov	r0, r31
     9ec:	a1 2c       	mov	r10, r1
     9ee:	b1 2c       	mov	r11, r1
     9f0:	f1 e6       	ldi	r31, 0x61	; 97
     9f2:	cf 2e       	mov	r12, r31
     9f4:	f4 e4       	ldi	r31, 0x44	; 68
     9f6:	df 2e       	mov	r13, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	e1 2c       	mov	r14, r1
     9fc:	f1 2c       	mov	r15, r1
     9fe:	0f e7       	ldi	r16, 0x7F	; 127
     a00:	13 e4       	ldi	r17, 0x43	; 67
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	a9 01       	movw	r20, r18
     a08:	0e 94 28 04 	call	0x850	; 0x850 <map>
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     a18:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a1c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	08 95       	ret

00000a32 <updateDutyCB1>:

//--> Se configura el ciclo de trabajo del canal B // PB2
void updateDutyCB1(uint8_t duty){
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
	OCR1B = map(duty,0,255,900,4800);
     a42:	68 2f       	mov	r22, r24
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 35 07 	call	0xe6a	; 0xe6a <__floatunsisf>
     a4e:	25 e4       	ldi	r18, 0x45	; 69
     a50:	2f 93       	push	r18
     a52:	26 e9       	ldi	r18, 0x96	; 150
     a54:	2f 93       	push	r18
     a56:	1f 92       	push	r1
     a58:	1f 92       	push	r1
     a5a:	0f 2e       	mov	r0, r31
     a5c:	a1 2c       	mov	r10, r1
     a5e:	b1 2c       	mov	r11, r1
     a60:	f1 e6       	ldi	r31, 0x61	; 97
     a62:	cf 2e       	mov	r12, r31
     a64:	f4 e4       	ldi	r31, 0x44	; 68
     a66:	df 2e       	mov	r13, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	e1 2c       	mov	r14, r1
     a6c:	f1 2c       	mov	r15, r1
     a6e:	0f e7       	ldi	r16, 0x7F	; 127
     a70:	13 e4       	ldi	r17, 0x43	; 67
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	a9 01       	movw	r20, r18
     a78:	0e 94 28 04 	call	0x850	; 0x850 <map>
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     a88:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     a8c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	08 95       	ret

00000aa2 <map1>:

//Se llama a la libreria donde se declararon los prototipos de función
#include "PWM2.h"

//Configuración del mapeado del los servomotores
float map1(float x, float in_min, float in_max, float out_min, float out_max){
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	28 97       	sbiw	r28, 0x08	; 8
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	29 01       	movw	r4, r18
     ad0:	3a 01       	movw	r6, r20
     ad2:	ed 82       	std	Y+5, r14	; 0x05
     ad4:	fe 82       	std	Y+6, r15	; 0x06
     ad6:	0f 83       	std	Y+7, r16	; 0x07
     ad8:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
     ada:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     ade:	69 83       	std	Y+1, r22	; 0x01
     ae0:	7a 83       	std	Y+2, r23	; 0x02
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	a6 01       	movw	r20, r12
     ae8:	95 01       	movw	r18, r10
     aea:	69 8d       	ldd	r22, Y+25	; 0x19
     aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     af2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	69 81       	ldd	r22, Y+1	; 0x01
     afc:	7a 81       	ldd	r23, Y+2	; 0x02
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     b06:	69 83       	std	Y+1, r22	; 0x01
     b08:	7a 83       	std	Y+2, r23	; 0x02
     b0a:	8b 83       	std	Y+3, r24	; 0x03
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	a3 01       	movw	r20, r6
     b10:	92 01       	movw	r18, r4
     b12:	c8 01       	movw	r24, r16
     b14:	b7 01       	movw	r22, r14
     b16:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	69 81       	ldd	r22, Y+1	; 0x01
     b20:	7a 81       	ldd	r23, Y+2	; 0x02
     b22:	8b 81       	ldd	r24, Y+3	; 0x03
     b24:	9c 81       	ldd	r25, Y+4	; 0x04
     b26:	0e 94 94 06 	call	0xd28	; 0xd28 <__divsf3>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	c6 01       	movw	r24, r12
     b30:	b5 01       	movw	r22, r10
     b32:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>
}
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	7f 90       	pop	r7
     b58:	6f 90       	pop	r6
     b5a:	5f 90       	pop	r5
     b5c:	4f 90       	pop	r4
     b5e:	08 95       	ret

00000b60 <initPWM2A>:

void initPWM2A(uint8_t inverted, uint16_t prescaler){
	//Definimos que el pin PB3 es una saldia (OC2A)  - NO INVERTIDA
	DDRB |= (1 << DDB3); 
     b60:	94 b1       	in	r25, 0x04	; 4
     b62:	98 60       	ori	r25, 0x08	; 8
     b64:	94 b9       	out	0x04, r25	; 4
	
	//-->Definimos PWM modo FAST TOP = 0xFF (MAX)
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
     b66:	e0 eb       	ldi	r30, 0xB0	; 176
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	90 81       	ld	r25, Z
     b6c:	93 60       	ori	r25, 0x03	; 3
     b6e:	90 83       	st	Z, r25
	
	if (inverted) {
     b70:	88 23       	and	r24, r24
     b72:	21 f0       	breq	.+8      	; 0xb7c <initPWM2A+0x1c>
		//-->Configurando OC2A como INVERTIDO
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
     b74:	80 81       	ld	r24, Z
     b76:	80 6c       	ori	r24, 0xC0	; 192
     b78:	80 83       	st	Z, r24
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <initPWM2A+0x26>
		} else	 {
			//-->Configurando OCBA como INVERTIDO
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
     b7c:	e0 eb       	ldi	r30, 0xB0	; 176
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
     b86:	61 15       	cp	r22, r1
     b88:	74 40       	sbci	r23, 0x04	; 4
     b8a:	31 f4       	brne	.+12     	; 0xb98 <initPWM2A+0x38>
		//Seleccionamos el Prescaler de 1024
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
     b8c:	e1 eb       	ldi	r30, 0xB1	; 177
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	87 60       	ori	r24, 0x07	; 7
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
     b98:	e1 eb       	ldi	r30, 0xB1	; 177
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <updateDutyCA2>:
	}
}

//--> Se configura el ciclo de trabajo del canal A // PB3
void updateDutyCA2(uint8_t duty){
     ba4:	af 92       	push	r10
     ba6:	bf 92       	push	r11
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
	OCR2A = map1(duty,0,255,6,36);
     bb4:	68 2f       	mov	r22, r24
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 35 07 	call	0xe6a	; 0xe6a <__floatunsisf>
     bc0:	22 e4       	ldi	r18, 0x42	; 66
     bc2:	2f 93       	push	r18
     bc4:	20 e1       	ldi	r18, 0x10	; 16
     bc6:	2f 93       	push	r18
     bc8:	1f 92       	push	r1
     bca:	1f 92       	push	r1
     bcc:	0f 2e       	mov	r0, r31
     bce:	a1 2c       	mov	r10, r1
     bd0:	b1 2c       	mov	r11, r1
     bd2:	f0 ec       	ldi	r31, 0xC0	; 192
     bd4:	cf 2e       	mov	r12, r31
     bd6:	f0 e4       	ldi	r31, 0x40	; 64
     bd8:	df 2e       	mov	r13, r31
     bda:	f0 2d       	mov	r31, r0
     bdc:	e1 2c       	mov	r14, r1
     bde:	f1 2c       	mov	r15, r1
     be0:	0f e7       	ldi	r16, 0x7F	; 127
     be2:	13 e4       	ldi	r17, 0x43	; 67
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 51 05 	call	0xaa2	; 0xaa2 <map1>
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     bfa:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	08 95       	ret

00000c10 <initUART9600>:
#include "USART.h"

//Inicializar la función del UART
void initUART9600(void){
	//Paso1: Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);		//Se configura el RX (PD0) como entrada
     c10:	8a b1       	in	r24, 0x0a	; 10
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		//Se configura el TX (PD1) como salida
     c16:	8a b1       	in	r24, 0x0a	; 10
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	8a b9       	out	0x0a, r24	; 10
	
	//Paso2: Configurar registro A ---> Modo FAST U2X0 = 1
	UCSR0A = 0;
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
     c22:	80 81       	ld	r24, Z
     c24:	82 60       	ori	r24, 0x02	; 2
     c26:	80 83       	st	Z, r24
	
	//Paso3: Configurar registro B --> Habilitar ISR RX, se habilita RX y TX
	//->>Se configura para tener interrupciones
	UCSR0B = 0;		//Se pone en 0 para mayor facilidad de configurar posteriomente
     c28:	e1 ec       	ldi	r30, 0xC1	; 193
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     c2e:	80 81       	ld	r24, Z
     c30:	88 69       	ori	r24, 0x98	; 152
     c32:	80 83       	st	Z, r24
	
	//Paso4: Configurar C > Frame (Se define el frame): 8 bits datos, no paridad, 1 bit de stop
	UCSR0C = 0;    //--> Se configura si se desea modo: asincrono o sincrono
     c34:	e2 ec       	ldi	r30, 0xC2	; 194
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);	//Se configura el tamaño del caracter --> 8 bits
     c3a:	80 81       	ld	r24, Z
     c3c:	86 60       	ori	r24, 0x06	; 6
     c3e:	80 83       	st	Z, r24
	
	//Paso5: Baudrate = 9600
	UBRR0 = 207;
     c40:	8f ec       	ldi	r24, 0xCF	; 207
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     c4c:	08 95       	ret

00000c4e <__subsf3>:
     c4e:	50 58       	subi	r21, 0x80	; 128

00000c50 <__addsf3>:
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__addsf3x>
     c58:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     c5c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     c60:	38 f0       	brcs	.+14     	; 0xc70 <__addsf3+0x20>
     c62:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     c66:	20 f0       	brcs	.+8      	; 0xc70 <__addsf3+0x20>
     c68:	39 f4       	brne	.+14     	; 0xc78 <__addsf3+0x28>
     c6a:	9f 3f       	cpi	r25, 0xFF	; 255
     c6c:	19 f4       	brne	.+6      	; 0xc74 <__addsf3+0x24>
     c6e:	26 f4       	brtc	.+8      	; 0xc78 <__addsf3+0x28>
     c70:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>
     c74:	0e f4       	brtc	.+2      	; 0xc78 <__addsf3+0x28>
     c76:	e0 95       	com	r30
     c78:	e7 fb       	bst	r30, 7
     c7a:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>

00000c7e <__addsf3x>:
     c7e:	e9 2f       	mov	r30, r25
     c80:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__addsf3+0xc>
     c86:	ba 17       	cp	r27, r26
     c88:	62 07       	cpc	r22, r18
     c8a:	73 07       	cpc	r23, r19
     c8c:	84 07       	cpc	r24, r20
     c8e:	95 07       	cpc	r25, r21
     c90:	20 f0       	brcs	.+8      	; 0xc9a <__addsf3x+0x1c>
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__addsf3x+0x34>
     c94:	a6 f5       	brtc	.+104    	; 0xcfe <__addsf3x+0x80>
     c96:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_zero>
     c9a:	0e f4       	brtc	.+2      	; 0xc9e <__addsf3x+0x20>
     c9c:	e0 95       	com	r30
     c9e:	0b 2e       	mov	r0, r27
     ca0:	ba 2f       	mov	r27, r26
     ca2:	a0 2d       	mov	r26, r0
     ca4:	0b 01       	movw	r0, r22
     ca6:	b9 01       	movw	r22, r18
     ca8:	90 01       	movw	r18, r0
     caa:	0c 01       	movw	r0, r24
     cac:	ca 01       	movw	r24, r20
     cae:	a0 01       	movw	r20, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	ff 27       	eor	r31, r31
     cb4:	59 1b       	sub	r21, r25
     cb6:	99 f0       	breq	.+38     	; 0xcde <__addsf3x+0x60>
     cb8:	59 3f       	cpi	r21, 0xF9	; 249
     cba:	50 f4       	brcc	.+20     	; 0xcd0 <__addsf3x+0x52>
     cbc:	50 3e       	cpi	r21, 0xE0	; 224
     cbe:	68 f1       	brcs	.+90     	; 0xd1a <__addsf3x+0x9c>
     cc0:	1a 16       	cp	r1, r26
     cc2:	f0 40       	sbci	r31, 0x00	; 0
     cc4:	a2 2f       	mov	r26, r18
     cc6:	23 2f       	mov	r18, r19
     cc8:	34 2f       	mov	r19, r20
     cca:	44 27       	eor	r20, r20
     ccc:	58 5f       	subi	r21, 0xF8	; 248
     cce:	f3 cf       	rjmp	.-26     	; 0xcb6 <__addsf3x+0x38>
     cd0:	46 95       	lsr	r20
     cd2:	37 95       	ror	r19
     cd4:	27 95       	ror	r18
     cd6:	a7 95       	ror	r26
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	53 95       	inc	r21
     cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__addsf3x+0x52>
     cde:	7e f4       	brtc	.+30     	; 0xcfe <__addsf3x+0x80>
     ce0:	1f 16       	cp	r1, r31
     ce2:	ba 0b       	sbc	r27, r26
     ce4:	62 0b       	sbc	r22, r18
     ce6:	73 0b       	sbc	r23, r19
     ce8:	84 0b       	sbc	r24, r20
     cea:	ba f0       	brmi	.+46     	; 0xd1a <__addsf3x+0x9c>
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	a1 f0       	breq	.+40     	; 0xd18 <__addsf3x+0x9a>
     cf0:	ff 0f       	add	r31, r31
     cf2:	bb 1f       	adc	r27, r27
     cf4:	66 1f       	adc	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	88 1f       	adc	r24, r24
     cfa:	c2 f7       	brpl	.-16     	; 0xcec <__addsf3x+0x6e>
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <__addsf3x+0x9c>
     cfe:	ba 0f       	add	r27, r26
     d00:	62 1f       	adc	r22, r18
     d02:	73 1f       	adc	r23, r19
     d04:	84 1f       	adc	r24, r20
     d06:	48 f4       	brcc	.+18     	; 0xd1a <__addsf3x+0x9c>
     d08:	87 95       	ror	r24
     d0a:	77 95       	ror	r23
     d0c:	67 95       	ror	r22
     d0e:	b7 95       	ror	r27
     d10:	f7 95       	ror	r31
     d12:	9e 3f       	cpi	r25, 0xFE	; 254
     d14:	08 f0       	brcs	.+2      	; 0xd18 <__addsf3x+0x9a>
     d16:	b0 cf       	rjmp	.-160    	; 0xc78 <__addsf3+0x28>
     d18:	93 95       	inc	r25
     d1a:	88 0f       	add	r24, r24
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <__addsf3x+0xa2>
     d1e:	99 27       	eor	r25, r25
     d20:	ee 0f       	add	r30, r30
     d22:	97 95       	ror	r25
     d24:	87 95       	ror	r24
     d26:	08 95       	ret

00000d28 <__divsf3>:
     d28:	0e 94 a8 06 	call	0xd50	; 0xd50 <__divsf3x>
     d2c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     d30:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     d34:	58 f0       	brcs	.+22     	; 0xd4c <__divsf3+0x24>
     d36:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     d3a:	40 f0       	brcs	.+16     	; 0xd4c <__divsf3+0x24>
     d3c:	29 f4       	brne	.+10     	; 0xd48 <__divsf3+0x20>
     d3e:	5f 3f       	cpi	r21, 0xFF	; 255
     d40:	29 f0       	breq	.+10     	; 0xd4c <__divsf3+0x24>
     d42:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     d46:	51 11       	cpse	r21, r1
     d48:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
     d4c:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>

00000d50 <__divsf3x>:
     d50:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     d54:	68 f3       	brcs	.-38     	; 0xd30 <__divsf3+0x8>

00000d56 <__divsf3_pse>:
     d56:	99 23       	and	r25, r25
     d58:	b1 f3       	breq	.-20     	; 0xd46 <__divsf3+0x1e>
     d5a:	55 23       	and	r21, r21
     d5c:	91 f3       	breq	.-28     	; 0xd42 <__divsf3+0x1a>
     d5e:	95 1b       	sub	r25, r21
     d60:	55 0b       	sbc	r21, r21
     d62:	bb 27       	eor	r27, r27
     d64:	aa 27       	eor	r26, r26
     d66:	62 17       	cp	r22, r18
     d68:	73 07       	cpc	r23, r19
     d6a:	84 07       	cpc	r24, r20
     d6c:	38 f0       	brcs	.+14     	; 0xd7c <__divsf3_pse+0x26>
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	aa 1f       	adc	r26, r26
     d7a:	a9 f3       	breq	.-22     	; 0xd66 <__divsf3_pse+0x10>
     d7c:	35 d0       	rcall	.+106    	; 0xde8 <__divsf3_pse+0x92>
     d7e:	0e 2e       	mov	r0, r30
     d80:	3a f0       	brmi	.+14     	; 0xd90 <__divsf3_pse+0x3a>
     d82:	e0 e8       	ldi	r30, 0x80	; 128
     d84:	32 d0       	rcall	.+100    	; 0xdea <__divsf3_pse+0x94>
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	50 40       	sbci	r21, 0x00	; 0
     d8a:	e6 95       	lsr	r30
     d8c:	00 1c       	adc	r0, r0
     d8e:	ca f7       	brpl	.-14     	; 0xd82 <__divsf3_pse+0x2c>
     d90:	2b d0       	rcall	.+86     	; 0xde8 <__divsf3_pse+0x92>
     d92:	fe 2f       	mov	r31, r30
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x92>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	26 17       	cp	r18, r22
     da0:	37 07       	cpc	r19, r23
     da2:	48 07       	cpc	r20, r24
     da4:	ab 07       	cpc	r26, r27
     da6:	b0 e8       	ldi	r27, 0x80	; 128
     da8:	09 f0       	breq	.+2      	; 0xdac <__divsf3_pse+0x56>
     daa:	bb 0b       	sbc	r27, r27
     dac:	80 2d       	mov	r24, r0
     dae:	bf 01       	movw	r22, r30
     db0:	ff 27       	eor	r31, r31
     db2:	93 58       	subi	r25, 0x83	; 131
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	3a f0       	brmi	.+14     	; 0xdc6 <__divsf3_pse+0x70>
     db8:	9e 3f       	cpi	r25, 0xFE	; 254
     dba:	51 05       	cpc	r21, r1
     dbc:	78 f0       	brcs	.+30     	; 0xddc <__divsf3_pse+0x86>
     dbe:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     dc2:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	e4 f3       	brlt	.-8      	; 0xdc2 <__divsf3_pse+0x6c>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	d4 f3       	brlt	.-12     	; 0xdc2 <__divsf3_pse+0x6c>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x78>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xae>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x94>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixunssfsi>:
     e0c:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_splitA>
     e10:	88 f0       	brcs	.+34     	; 0xe34 <__fixunssfsi+0x28>
     e12:	9f 57       	subi	r25, 0x7F	; 127
     e14:	98 f0       	brcs	.+38     	; 0xe3c <__fixunssfsi+0x30>
     e16:	b9 2f       	mov	r27, r25
     e18:	99 27       	eor	r25, r25
     e1a:	b7 51       	subi	r27, 0x17	; 23
     e1c:	b0 f0       	brcs	.+44     	; 0xe4a <__fixunssfsi+0x3e>
     e1e:	e1 f0       	breq	.+56     	; 0xe58 <__fixunssfsi+0x4c>
     e20:	66 0f       	add	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	88 1f       	adc	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	1a f0       	brmi	.+6      	; 0xe30 <__fixunssfsi+0x24>
     e2a:	ba 95       	dec	r27
     e2c:	c9 f7       	brne	.-14     	; 0xe20 <__fixunssfsi+0x14>
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <__fixunssfsi+0x4c>
     e30:	b1 30       	cpi	r27, 0x01	; 1
     e32:	91 f0       	breq	.+36     	; 0xe58 <__fixunssfsi+0x4c>
     e34:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_zero>
     e38:	b1 e0       	ldi	r27, 0x01	; 1
     e3a:	08 95       	ret
     e3c:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_zero>
     e40:	67 2f       	mov	r22, r23
     e42:	78 2f       	mov	r23, r24
     e44:	88 27       	eor	r24, r24
     e46:	b8 5f       	subi	r27, 0xF8	; 248
     e48:	39 f0       	breq	.+14     	; 0xe58 <__fixunssfsi+0x4c>
     e4a:	b9 3f       	cpi	r27, 0xF9	; 249
     e4c:	cc f3       	brlt	.-14     	; 0xe40 <__fixunssfsi+0x34>
     e4e:	86 95       	lsr	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b3 95       	inc	r27
     e56:	d9 f7       	brne	.-10     	; 0xe4e <__fixunssfsi+0x42>
     e58:	3e f4       	brtc	.+14     	; 0xe68 <__fixunssfsi+0x5c>
     e5a:	90 95       	com	r25
     e5c:	80 95       	com	r24
     e5e:	70 95       	com	r23
     e60:	61 95       	neg	r22
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	08 95       	ret

00000e6a <__floatunsisf>:
     e6a:	e8 94       	clt
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <__floatsisf+0x12>

00000e6e <__floatsisf>:
     e6e:	97 fb       	bst	r25, 7
     e70:	3e f4       	brtc	.+14     	; 0xe80 <__floatsisf+0x12>
     e72:	90 95       	com	r25
     e74:	80 95       	com	r24
     e76:	70 95       	com	r23
     e78:	61 95       	neg	r22
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	99 23       	and	r25, r25
     e82:	a9 f0       	breq	.+42     	; 0xeae <__floatsisf+0x40>
     e84:	f9 2f       	mov	r31, r25
     e86:	96 e9       	ldi	r25, 0x96	; 150
     e88:	bb 27       	eor	r27, r27
     e8a:	93 95       	inc	r25
     e8c:	f6 95       	lsr	r31
     e8e:	87 95       	ror	r24
     e90:	77 95       	ror	r23
     e92:	67 95       	ror	r22
     e94:	b7 95       	ror	r27
     e96:	f1 11       	cpse	r31, r1
     e98:	f8 cf       	rjmp	.-16     	; 0xe8a <__floatsisf+0x1c>
     e9a:	fa f4       	brpl	.+62     	; 0xeda <__floatsisf+0x6c>
     e9c:	bb 0f       	add	r27, r27
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__floatsisf+0x36>
     ea0:	60 ff       	sbrs	r22, 0
     ea2:	1b c0       	rjmp	.+54     	; 0xeda <__floatsisf+0x6c>
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	16 c0       	rjmp	.+44     	; 0xeda <__floatsisf+0x6c>
     eae:	88 23       	and	r24, r24
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <__floatsisf+0x48>
     eb2:	96 e9       	ldi	r25, 0x96	; 150
     eb4:	11 c0       	rjmp	.+34     	; 0xed8 <__floatsisf+0x6a>
     eb6:	77 23       	and	r23, r23
     eb8:	21 f0       	breq	.+8      	; 0xec2 <__floatsisf+0x54>
     eba:	9e e8       	ldi	r25, 0x8E	; 142
     ebc:	87 2f       	mov	r24, r23
     ebe:	76 2f       	mov	r23, r22
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <__floatsisf+0x5e>
     ec2:	66 23       	and	r22, r22
     ec4:	71 f0       	breq	.+28     	; 0xee2 <__floatsisf+0x74>
     ec6:	96 e8       	ldi	r25, 0x86	; 134
     ec8:	86 2f       	mov	r24, r22
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	2a f0       	brmi	.+10     	; 0xeda <__floatsisf+0x6c>
     ed0:	9a 95       	dec	r25
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	da f7       	brpl	.-10     	; 0xed0 <__floatsisf+0x62>
     eda:	88 0f       	add	r24, r24
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	97 f9       	bld	r25, 7
     ee2:	08 95       	ret

00000ee4 <__fp_inf>:
     ee4:	97 f9       	bld	r25, 7
     ee6:	9f 67       	ori	r25, 0x7F	; 127
     ee8:	80 e8       	ldi	r24, 0x80	; 128
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	08 95       	ret

00000ef0 <__fp_nan>:
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	80 ec       	ldi	r24, 0xC0	; 192
     ef4:	08 95       	ret

00000ef6 <__fp_pscA>:
     ef6:	00 24       	eor	r0, r0
     ef8:	0a 94       	dec	r0
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	09 06       	cpc	r0, r25
     f02:	08 95       	ret

00000f04 <__fp_pscB>:
     f04:	00 24       	eor	r0, r0
     f06:	0a 94       	dec	r0
     f08:	12 16       	cp	r1, r18
     f0a:	13 06       	cpc	r1, r19
     f0c:	14 06       	cpc	r1, r20
     f0e:	05 06       	cpc	r0, r21
     f10:	08 95       	ret

00000f12 <__fp_round>:
     f12:	09 2e       	mov	r0, r25
     f14:	03 94       	inc	r0
     f16:	00 0c       	add	r0, r0
     f18:	11 f4       	brne	.+4      	; 0xf1e <__fp_round+0xc>
     f1a:	88 23       	and	r24, r24
     f1c:	52 f0       	brmi	.+20     	; 0xf32 <__fp_round+0x20>
     f1e:	bb 0f       	add	r27, r27
     f20:	40 f4       	brcc	.+16     	; 0xf32 <__fp_round+0x20>
     f22:	bf 2b       	or	r27, r31
     f24:	11 f4       	brne	.+4      	; 0xf2a <__fp_round+0x18>
     f26:	60 ff       	sbrs	r22, 0
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__fp_round+0x20>
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	08 95       	ret

00000f34 <__fp_split3>:
     f34:	57 fd       	sbrc	r21, 7
     f36:	90 58       	subi	r25, 0x80	; 128
     f38:	44 0f       	add	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	59 f0       	breq	.+22     	; 0xf54 <__fp_splitA+0x10>
     f3e:	5f 3f       	cpi	r21, 0xFF	; 255
     f40:	71 f0       	breq	.+28     	; 0xf5e <__fp_splitA+0x1a>
     f42:	47 95       	ror	r20

00000f44 <__fp_splitA>:
     f44:	88 0f       	add	r24, r24
     f46:	97 fb       	bst	r25, 7
     f48:	99 1f       	adc	r25, r25
     f4a:	61 f0       	breq	.+24     	; 0xf64 <__fp_splitA+0x20>
     f4c:	9f 3f       	cpi	r25, 0xFF	; 255
     f4e:	79 f0       	breq	.+30     	; 0xf6e <__fp_splitA+0x2a>
     f50:	87 95       	ror	r24
     f52:	08 95       	ret
     f54:	12 16       	cp	r1, r18
     f56:	13 06       	cpc	r1, r19
     f58:	14 06       	cpc	r1, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	f2 cf       	rjmp	.-28     	; 0xf42 <__fp_split3+0xe>
     f5e:	46 95       	lsr	r20
     f60:	f1 df       	rcall	.-30     	; 0xf44 <__fp_splitA>
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <__fp_splitA+0x30>
     f64:	16 16       	cp	r1, r22
     f66:	17 06       	cpc	r1, r23
     f68:	18 06       	cpc	r1, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	f1 cf       	rjmp	.-30     	; 0xf50 <__fp_splitA+0xc>
     f6e:	86 95       	lsr	r24
     f70:	71 05       	cpc	r23, r1
     f72:	61 05       	cpc	r22, r1
     f74:	08 94       	sec
     f76:	08 95       	ret

00000f78 <__fp_zero>:
     f78:	e8 94       	clt

00000f7a <__fp_szero>:
     f7a:	bb 27       	eor	r27, r27
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	cb 01       	movw	r24, r22
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__mulsf3>:
     f86:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3x>
     f8a:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     f8e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     f92:	38 f0       	brcs	.+14     	; 0xfa2 <__mulsf3+0x1c>
     f94:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__mulsf3+0x1c>
     f9a:	95 23       	and	r25, r21
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <__mulsf3+0x1c>
     f9e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     fa2:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>
     fa6:	11 24       	eor	r1, r1
     fa8:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>

00000fac <__mulsf3x>:
     fac:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     fb0:	70 f3       	brcs	.-36     	; 0xf8e <__mulsf3+0x8>

00000fb2 <__mulsf3_pse>:
     fb2:	95 9f       	mul	r25, r21
     fb4:	c1 f3       	breq	.-16     	; 0xfa6 <__mulsf3+0x20>
     fb6:	95 0f       	add	r25, r21
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	55 1f       	adc	r21, r21
     fbc:	62 9f       	mul	r22, r18
     fbe:	f0 01       	movw	r30, r0
     fc0:	72 9f       	mul	r23, r18
     fc2:	bb 27       	eor	r27, r27
     fc4:	f0 0d       	add	r31, r0
     fc6:	b1 1d       	adc	r27, r1
     fc8:	63 9f       	mul	r22, r19
     fca:	aa 27       	eor	r26, r26
     fcc:	f0 0d       	add	r31, r0
     fce:	b1 1d       	adc	r27, r1
     fd0:	aa 1f       	adc	r26, r26
     fd2:	64 9f       	mul	r22, r20
     fd4:	66 27       	eor	r22, r22
     fd6:	b0 0d       	add	r27, r0
     fd8:	a1 1d       	adc	r26, r1
     fda:	66 1f       	adc	r22, r22
     fdc:	82 9f       	mul	r24, r18
     fde:	22 27       	eor	r18, r18
     fe0:	b0 0d       	add	r27, r0
     fe2:	a1 1d       	adc	r26, r1
     fe4:	62 1f       	adc	r22, r18
     fe6:	73 9f       	mul	r23, r19
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	62 1f       	adc	r22, r18
     fee:	83 9f       	mul	r24, r19
     ff0:	a0 0d       	add	r26, r0
     ff2:	61 1d       	adc	r22, r1
     ff4:	22 1f       	adc	r18, r18
     ff6:	74 9f       	mul	r23, r20
     ff8:	33 27       	eor	r19, r19
     ffa:	a0 0d       	add	r26, r0
     ffc:	61 1d       	adc	r22, r1
     ffe:	23 1f       	adc	r18, r19
    1000:	84 9f       	mul	r24, r20
    1002:	60 0d       	add	r22, r0
    1004:	21 1d       	adc	r18, r1
    1006:	82 2f       	mov	r24, r18
    1008:	76 2f       	mov	r23, r22
    100a:	6a 2f       	mov	r22, r26
    100c:	11 24       	eor	r1, r1
    100e:	9f 57       	subi	r25, 0x7F	; 127
    1010:	50 40       	sbci	r21, 0x00	; 0
    1012:	9a f0       	brmi	.+38     	; 0x103a <__mulsf3_pse+0x88>
    1014:	f1 f0       	breq	.+60     	; 0x1052 <__mulsf3_pse+0xa0>
    1016:	88 23       	and	r24, r24
    1018:	4a f0       	brmi	.+18     	; 0x102c <__mulsf3_pse+0x7a>
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	bb 1f       	adc	r27, r27
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	91 50       	subi	r25, 0x01	; 1
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	a9 f7       	brne	.-22     	; 0x1016 <__mulsf3_pse+0x64>
    102c:	9e 3f       	cpi	r25, 0xFE	; 254
    102e:	51 05       	cpc	r21, r1
    1030:	80 f0       	brcs	.+32     	; 0x1052 <__mulsf3_pse+0xa0>
    1032:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
    1036:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	e4 f3       	brlt	.-8      	; 0x1036 <__mulsf3_pse+0x84>
    103e:	98 3e       	cpi	r25, 0xE8	; 232
    1040:	d4 f3       	brlt	.-12     	; 0x1036 <__mulsf3_pse+0x84>
    1042:	86 95       	lsr	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f7 95       	ror	r31
    104c:	e7 95       	ror	r30
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	c1 f7       	brne	.-16     	; 0x1042 <__mulsf3_pse+0x90>
    1052:	fe 2b       	or	r31, r30
    1054:	88 0f       	add	r24, r24
    1056:	91 1d       	adc	r25, r1
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <eeprom_read_byte>:
    1060:	f9 99       	sbic	0x1f, 1	; 31
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <eeprom_read_byte>
    1064:	92 bd       	out	0x22, r25	; 34
    1066:	81 bd       	out	0x21, r24	; 33
    1068:	f8 9a       	sbi	0x1f, 0	; 31
    106a:	99 27       	eor	r25, r25
    106c:	80 b5       	in	r24, 0x20	; 32
    106e:	08 95       	ret

00001070 <eeprom_write_byte>:
    1070:	26 2f       	mov	r18, r22

00001072 <eeprom_write_r18>:
    1072:	f9 99       	sbic	0x1f, 1	; 31
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <eeprom_write_r18>
    1076:	1f ba       	out	0x1f, r1	; 31
    1078:	92 bd       	out	0x22, r25	; 34
    107a:	81 bd       	out	0x21, r24	; 33
    107c:	20 bd       	out	0x20, r18	; 32
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	fa 9a       	sbi	0x1f, 2	; 31
    1084:	f9 9a       	sbi	0x1f, 1	; 31
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	08 95       	ret

0000108c <_exit>:
    108c:	f8 94       	cli

0000108e <__stop_program>:
    108e:	ff cf       	rjmp	.-2      	; 0x108e <__stop_program>
