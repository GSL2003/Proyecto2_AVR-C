
Servomotores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000bf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107a  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a12  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000908  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0a  00000000  00000000  0000398b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  88:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
// Configuración para el ADC.

#include "ADC.h"

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		// VREF = AVCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		// VREF = AVCC
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);		// JUSTIFICACION A LA DERECHA
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);		// ENCIENDER EL ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// HABILITAR ISR ADC
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);		// PRESCALES 128 -> 16M = 125kHz
  c6:	80 81       	ld	r24, Z
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	80 83       	st	Z, r24
	
	//Entradas para los potenciometros.
	
	DIDR0 |= (1 << ADC0D);		// DESABILITAR LA ENTRADA DIGITAL PC0
  cc:	ee e7       	ldi	r30, 0x7E	; 126
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC1D);		// DESABILITAR LA ENTRADA DIGITAL PC1
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC2D);		// DESABILITAR LA ENTRADA DIGITAL PC2
  dc:	80 81       	ld	r24, Z
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);		// DESABILITAR LA ENTRADA DIGITAL PC3
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <ADC_CONVERT>:
}

uint8_t ADC_CONVERT(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// SELECCION DEL CANAL
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	89 2b       	or	r24, r25
  f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);			// INICIA EL ADC
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));		// FINALIZA LA CONVERSION
 100:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 104:	86 fd       	sbrc	r24, 6
 106:	fc cf       	rjmp	.-8      	; 0x100 <ADC_CONVERT+0x16>
	return(ADCH);
 108:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10c:	08 95       	ret

0000010e <main>:
	}
}

void setup (void){
	UCSR0B = 0;		// DESABILITA TX Y RX
	DDRC = 0;		// PUERTO C COMO ENTRADA
 10e:	f8 94       	cli
 110:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 114:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 118:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 11c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 120:	14 bc       	out	0x24, r1	; 36
 122:	15 bc       	out	0x25, r1	; 37
 124:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 128:	4f e3       	ldi	r20, 0x3F	; 63
 12a:	5c e9       	ldi	r21, 0x9C	; 156
 12c:	68 e0       	ldi	r22, 0x08	; 8
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 34 02 	call	0x468	; 0x468 <initPWM1A>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	74 e0       	ldi	r23, 0x04	; 4
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <initPWM2A>
 140:	4f e3       	ldi	r20, 0x3F	; 63
 142:	5c e9       	ldi	r21, 0x9C	; 156
 144:	68 e0       	ldi	r22, 0x08	; 8
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <initPWM1B>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	74 e0       	ldi	r23, 0x04	; 4
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 8d 01 	call	0x31a	; 0x31a <initPWM0FastA>
 158:	78 94       	sei
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 160:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DutyC1>
 164:	0e 94 8e 02 	call	0x51c	; 0x51c <updateDutyCA1>
 168:	cc e7       	ldi	r28, 0x7C	; 124
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	88 81       	ld	r24, Y
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	88 83       	st	Y, r24
 172:	88 81       	ld	r24, Y
 174:	88 83       	st	Y, r24
 176:	0a e7       	ldi	r16, 0x7A	; 122
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	f8 01       	movw	r30, r16
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	ff ef       	ldi	r31, 0xFF	; 255
 184:	20 e7       	ldi	r18, 0x70	; 112
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	f1 50       	subi	r31, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 19a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <DutyC2>
 19e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <updateDutyCA2>
 1a2:	88 81       	ld	r24, Y
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	88 83       	st	Y, r24
 1a8:	88 81       	ld	r24, Y
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	88 83       	st	Y, r24
 1ae:	f8 01       	movw	r30, r16
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
 1b6:	ff ef       	ldi	r31, 0xFF	; 255
 1b8:	20 e7       	ldi	r18, 0x70	; 112
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	f1 50       	subi	r31, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0xae>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xb8>
 1c6:	00 00       	nop
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 1ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DutyC3>
 1d2:	0e 94 c6 02 	call	0x58c	; 0x58c <updateDutyCB1>
 1d6:	88 81       	ld	r24, Y
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	88 83       	st	Y, r24
 1dc:	88 81       	ld	r24, Y
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	88 83       	st	Y, r24
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 81       	ld	r24, Z
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	80 83       	st	Z, r24
 1ea:	ff ef       	ldi	r31, 0xFF	; 255
 1ec:	20 e7       	ldi	r18, 0x70	; 112
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	f1 50       	subi	r31, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xe2>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xec>
 1fa:	00 00       	nop
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	0e 94 a0 01 	call	0x340	; 0x340 <updateDutyCycleA>
 20a:	88 81       	ld	r24, Y
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	88 83       	st	Y, r24
 210:	88 81       	ld	r24, Y
 212:	83 60       	ori	r24, 0x03	; 3
 214:	88 83       	st	Y, r24
 216:	f8 01       	movw	r30, r16
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
 21e:	ff ef       	ldi	r31, 0xFF	; 255
 220:	20 e7       	ldi	r18, 0x70	; 112
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	f1 50       	subi	r31, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x116>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x120>
 22e:	00 00       	nop
 230:	94 cf       	rjmp	.-216    	; 0x15a <main+0x4c>

00000232 <__vector_21>:
}

ISR(ADC_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//LIMPIA LA BANDERA
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	80 83       	st	Z, r24
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <map2>:
 *  Author: yemo0
 */ 

#include "PWM0.h"

float map2(float x, float in_min, float in_max, float out_min, float out_max){
 25c:	4f 92       	push	r4
 25e:	5f 92       	push	r5
 260:	6f 92       	push	r6
 262:	7f 92       	push	r7
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	28 97       	sbiw	r28, 0x08	; 8
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	29 01       	movw	r4, r18
 28a:	3a 01       	movw	r6, r20
 28c:	ed 82       	std	Y+5, r14	; 0x05
 28e:	fe 82       	std	Y+6, r15	; 0x06
 290:	0f 83       	std	Y+7, r16	; 0x07
 292:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 294:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 298:	69 83       	std	Y+1, r22	; 0x01
 29a:	7a 83       	std	Y+2, r23	; 0x02
 29c:	8b 83       	std	Y+3, r24	; 0x03
 29e:	9c 83       	std	Y+4, r25	; 0x04
 2a0:	a6 01       	movw	r20, r12
 2a2:	95 01       	movw	r18, r10
 2a4:	69 8d       	ldd	r22, Y+25	; 0x19
 2a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2ac:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	69 81       	ldd	r22, Y+1	; 0x01
 2b6:	7a 81       	ldd	r23, Y+2	; 0x02
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	9c 81       	ldd	r25, Y+4	; 0x04
 2bc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__mulsf3>
 2c0:	69 83       	std	Y+1, r22	; 0x01
 2c2:	7a 83       	std	Y+2, r23	; 0x02
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	9c 83       	std	Y+4, r25	; 0x04
 2c8:	a3 01       	movw	r20, r6
 2ca:	92 01       	movw	r18, r4
 2cc:	c8 01       	movw	r24, r16
 2ce:	b7 01       	movw	r22, r14
 2d0:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	69 81       	ldd	r22, Y+1	; 0x01
 2da:	7a 81       	ldd	r23, Y+2	; 0x02
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	9c 81       	ldd	r25, Y+4	; 0x04
 2e0:	0e 94 22 04 	call	0x844	; 0x844 <__divsf3>
 2e4:	9b 01       	movw	r18, r22
 2e6:	ac 01       	movw	r20, r24
 2e8:	c6 01       	movw	r24, r12
 2ea:	b5 01       	movw	r22, r10
 2ec:	0e 94 b6 03 	call	0x76c	; 0x76c <__addsf3>
}
 2f0:	28 96       	adiw	r28, 0x08	; 8
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	7f 90       	pop	r7
 312:	6f 90       	pop	r6
 314:	5f 90       	pop	r5
 316:	4f 90       	pop	r4
 318:	08 95       	ret

0000031a <initPWM0FastA>:

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Definimos que el pin PD6 es una saldia (OC0A)  - NO INVERTIDA
	DDRD |= (1<<DDD6);
 31a:	9a b1       	in	r25, 0x0a	; 10
 31c:	90 64       	ori	r25, 0x40	; 64
 31e:	9a b9       	out	0x0a, r25	; 10
	
	//Paso1: Configurar TCCR0A y TCCR0B en 0
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if(inverted){
 320:	88 23       	and	r24, r24
 322:	21 f0       	breq	.+8      	; 0x32c <initPWM0FastA+0x12>
		//Configurando OC0A como INVERTIDO
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 324:	84 b5       	in	r24, 0x24	; 36
 326:	80 6c       	ori	r24, 0xC0	; 192
 328:	84 bd       	out	0x24, r24	; 36
 32a:	03 c0       	rjmp	.+6      	; 0x332 <initPWM0FastA+0x18>
		}else{
		//Configurando OC0A como NO INVERTIDO
		TCCR0A |= (1<<COM0A1);
 32c:	84 b5       	in	r24, 0x24	; 36
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	84 bd       	out	0x24, r24	; 36
	}
	
	//Definimos PWM modo FAST TOP = 0xFF (MAX) --- Es igual para ambos TCCR0A y TCCR0B
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 332:	84 b5       	in	r24, 0x24	; 36
 334:	83 60       	ori	r24, 0x03	; 3
 336:	84 bd       	out	0x24, r24	; 36
	
	//Seleccionamos el Prescaler de 1024
	TCCR0B |= (1<<CS02)|(1<<CS00);
 338:	85 b5       	in	r24, 0x25	; 37
 33a:	85 60       	ori	r24, 0x05	; 5
 33c:	85 bd       	out	0x25, r24	; 37
 33e:	08 95       	ret

00000340 <updateDutyCycleA>:
}

void updateDutyCycleA(uint8_t duty){
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
	OCR0A = map2(duty,0,255,6,36);
 350:	68 2f       	mov	r22, r24
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 c3 04 	call	0x986	; 0x986 <__floatunsisf>
 35c:	22 e4       	ldi	r18, 0x42	; 66
 35e:	2f 93       	push	r18
 360:	20 e1       	ldi	r18, 0x10	; 16
 362:	2f 93       	push	r18
 364:	1f 92       	push	r1
 366:	1f 92       	push	r1
 368:	0f 2e       	mov	r0, r31
 36a:	a1 2c       	mov	r10, r1
 36c:	b1 2c       	mov	r11, r1
 36e:	f0 ec       	ldi	r31, 0xC0	; 192
 370:	cf 2e       	mov	r12, r31
 372:	f0 e4       	ldi	r31, 0x40	; 64
 374:	df 2e       	mov	r13, r31
 376:	f0 2d       	mov	r31, r0
 378:	e1 2c       	mov	r14, r1
 37a:	f1 2c       	mov	r15, r1
 37c:	0f e7       	ldi	r16, 0x7F	; 127
 37e:	13 e4       	ldi	r17, 0x43	; 67
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	a9 01       	movw	r20, r18
 386:	0e 94 2e 01 	call	0x25c	; 0x25c <map2>
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 396:	67 bd       	out	0x27, r22	; 39
}
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	08 95       	ret

000003aa <map>:
 *  Author: Guillermo Schwartz
 */ 

#include "PWM1.h"

float map(float x, float in_min, float in_max, float out_min, float out_max){
 3aa:	4f 92       	push	r4
 3ac:	5f 92       	push	r5
 3ae:	6f 92       	push	r6
 3b0:	7f 92       	push	r7
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	28 97       	sbiw	r28, 0x08	; 8
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	29 01       	movw	r4, r18
 3d8:	3a 01       	movw	r6, r20
 3da:	ed 82       	std	Y+5, r14	; 0x05
 3dc:	fe 82       	std	Y+6, r15	; 0x06
 3de:	0f 83       	std	Y+7, r16	; 0x07
 3e0:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 3e2:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 3e6:	69 83       	std	Y+1, r22	; 0x01
 3e8:	7a 83       	std	Y+2, r23	; 0x02
 3ea:	8b 83       	std	Y+3, r24	; 0x03
 3ec:	9c 83       	std	Y+4, r25	; 0x04
 3ee:	a6 01       	movw	r20, r12
 3f0:	95 01       	movw	r18, r10
 3f2:	69 8d       	ldd	r22, Y+25	; 0x19
 3f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3fa:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 3fe:	9b 01       	movw	r18, r22
 400:	ac 01       	movw	r20, r24
 402:	69 81       	ldd	r22, Y+1	; 0x01
 404:	7a 81       	ldd	r23, Y+2	; 0x02
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	9c 81       	ldd	r25, Y+4	; 0x04
 40a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__mulsf3>
 40e:	69 83       	std	Y+1, r22	; 0x01
 410:	7a 83       	std	Y+2, r23	; 0x02
 412:	8b 83       	std	Y+3, r24	; 0x03
 414:	9c 83       	std	Y+4, r25	; 0x04
 416:	a3 01       	movw	r20, r6
 418:	92 01       	movw	r18, r4
 41a:	c8 01       	movw	r24, r16
 41c:	b7 01       	movw	r22, r14
 41e:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 422:	9b 01       	movw	r18, r22
 424:	ac 01       	movw	r20, r24
 426:	69 81       	ldd	r22, Y+1	; 0x01
 428:	7a 81       	ldd	r23, Y+2	; 0x02
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	9c 81       	ldd	r25, Y+4	; 0x04
 42e:	0e 94 22 04 	call	0x844	; 0x844 <__divsf3>
 432:	9b 01       	movw	r18, r22
 434:	ac 01       	movw	r20, r24
 436:	c6 01       	movw	r24, r12
 438:	b5 01       	movw	r22, r10
 43a:	0e 94 b6 03 	call	0x76c	; 0x76c <__addsf3>
}
 43e:	28 96       	adiw	r28, 0x08	; 8
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	cf 90       	pop	r12
 45a:	bf 90       	pop	r11
 45c:	af 90       	pop	r10
 45e:	7f 90       	pop	r7
 460:	6f 90       	pop	r6
 462:	5f 90       	pop	r5
 464:	4f 90       	pop	r4
 466:	08 95       	ret

00000468 <initPWM1A>:

void initPWM1A(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB1); //PB1 COMO SALIDA
 468:	94 b1       	in	r25, 0x04	; 4
 46a:	92 60       	ori	r25, 0x02	; 2
 46c:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 46e:	e0 e8       	ldi	r30, 0x80	; 128
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	90 81       	ld	r25, Z
 474:	92 60       	ori	r25, 0x02	; 2
 476:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 478:	e1 e8       	ldi	r30, 0x81	; 129
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	90 81       	ld	r25, Z
 47e:	98 61       	ori	r25, 0x18	; 24
 480:	90 83       	st	Z, r25
	ICR1 = top;
 482:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 486:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 48a:	88 23       	and	r24, r24
 48c:	31 f0       	breq	.+12     	; 0x49a <initPWM1A+0x32>
		TCCR1A |= (1 << COM1A1)|(1 << COM1A0);//PWM INVERTIDO
 48e:	e0 e8       	ldi	r30, 0x80	; 128
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 6c       	ori	r24, 0xC0	; 192
 496:	80 83       	st	Z, r24
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <initPWM1A+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1A1);//PWM NO INVERTIDO
 49a:	e0 e8       	ldi	r30, 0x80	; 128
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 4a4:	68 30       	cpi	r22, 0x08	; 8
 4a6:	71 05       	cpc	r23, r1
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <initPWM1A+0x4e>
		TCCR1B |= (1 << CS11);
 4aa:	e1 e8       	ldi	r30, 0x81	; 129
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	82 60       	ori	r24, 0x02	; 2
 4b2:	80 83       	st	Z, r24
 4b4:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 4b6:	e1 e8       	ldi	r30, 0x81	; 129
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	80 83       	st	Z, r24
 4c0:	08 95       	ret

000004c2 <initPWM1B>:
	}
}

void initPWM1B(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB2); //PB2 COMO SALIDA
 4c2:	94 b1       	in	r25, 0x04	; 4
 4c4:	94 60       	ori	r25, 0x04	; 4
 4c6:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 4c8:	e0 e8       	ldi	r30, 0x80	; 128
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	90 81       	ld	r25, Z
 4ce:	92 60       	ori	r25, 0x02	; 2
 4d0:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 4d2:	e1 e8       	ldi	r30, 0x81	; 129
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	90 81       	ld	r25, Z
 4d8:	98 61       	ori	r25, 0x18	; 24
 4da:	90 83       	st	Z, r25
	ICR1 = top;
 4dc:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 4e0:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 4e4:	88 23       	and	r24, r24
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <initPWM1B+0x32>
		TCCR1A |= (1 << COM1B1)|(1 << COM1B0);//PWM INVERTIDO
 4e8:	e0 e8       	ldi	r30, 0x80	; 128
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	80 63       	ori	r24, 0x30	; 48
 4f0:	80 83       	st	Z, r24
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <initPWM1B+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1B1);//PWM NO INVERTIDO
 4f4:	e0 e8       	ldi	r30, 0x80	; 128
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 4fe:	68 30       	cpi	r22, 0x08	; 8
 500:	71 05       	cpc	r23, r1
 502:	31 f4       	brne	.+12     	; 0x510 <initPWM1B+0x4e>
		TCCR1B |= (1 << CS11);
 504:	e1 e8       	ldi	r30, 0x81	; 129
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	80 83       	st	Z, r24
 50e:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 510:	e1 e8       	ldi	r30, 0x81	; 129
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	84 60       	ori	r24, 0x04	; 4
 518:	80 83       	st	Z, r24
 51a:	08 95       	ret

0000051c <updateDutyCA1>:
	}
}


void updateDutyCA1(uint8_t duty){//900=0° 2800=90° 48000=180°
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
	OCR1A = map(duty,0,255,900,4800);
 52c:	68 2f       	mov	r22, r24
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 c3 04 	call	0x986	; 0x986 <__floatunsisf>
 538:	25 e4       	ldi	r18, 0x45	; 69
 53a:	2f 93       	push	r18
 53c:	26 e9       	ldi	r18, 0x96	; 150
 53e:	2f 93       	push	r18
 540:	1f 92       	push	r1
 542:	1f 92       	push	r1
 544:	0f 2e       	mov	r0, r31
 546:	a1 2c       	mov	r10, r1
 548:	b1 2c       	mov	r11, r1
 54a:	f1 e6       	ldi	r31, 0x61	; 97
 54c:	cf 2e       	mov	r12, r31
 54e:	f4 e4       	ldi	r31, 0x44	; 68
 550:	df 2e       	mov	r13, r31
 552:	f0 2d       	mov	r31, r0
 554:	e1 2c       	mov	r14, r1
 556:	f1 2c       	mov	r15, r1
 558:	0f e7       	ldi	r16, 0x7F	; 127
 55a:	13 e4       	ldi	r17, 0x43	; 67
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	a9 01       	movw	r20, r18
 562:	0e 94 d5 01 	call	0x3aa	; 0x3aa <map>
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 572:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 576:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	bf 90       	pop	r11
 588:	af 90       	pop	r10
 58a:	08 95       	ret

0000058c <updateDutyCB1>:

void updateDutyCB1(uint8_t duty){
 58c:	af 92       	push	r10
 58e:	bf 92       	push	r11
 590:	cf 92       	push	r12
 592:	df 92       	push	r13
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
	OCR1B = map(duty,0,255,900,4800);
 59c:	68 2f       	mov	r22, r24
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 c3 04 	call	0x986	; 0x986 <__floatunsisf>
 5a8:	25 e4       	ldi	r18, 0x45	; 69
 5aa:	2f 93       	push	r18
 5ac:	26 e9       	ldi	r18, 0x96	; 150
 5ae:	2f 93       	push	r18
 5b0:	1f 92       	push	r1
 5b2:	1f 92       	push	r1
 5b4:	0f 2e       	mov	r0, r31
 5b6:	a1 2c       	mov	r10, r1
 5b8:	b1 2c       	mov	r11, r1
 5ba:	f1 e6       	ldi	r31, 0x61	; 97
 5bc:	cf 2e       	mov	r12, r31
 5be:	f4 e4       	ldi	r31, 0x44	; 68
 5c0:	df 2e       	mov	r13, r31
 5c2:	f0 2d       	mov	r31, r0
 5c4:	e1 2c       	mov	r14, r1
 5c6:	f1 2c       	mov	r15, r1
 5c8:	0f e7       	ldi	r16, 0x7F	; 127
 5ca:	13 e4       	ldi	r17, 0x43	; 67
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	a9 01       	movw	r20, r18
 5d2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <map>
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 5e2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 5e6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	df 90       	pop	r13
 5f4:	cf 90       	pop	r12
 5f6:	bf 90       	pop	r11
 5f8:	af 90       	pop	r10
 5fa:	08 95       	ret

000005fc <map1>:
	}

	if (prescaler == 1024) {
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
		} else {
		TCCR2B |= (1 << CS20);
 5fc:	4f 92       	push	r4
 5fe:	5f 92       	push	r5
 600:	6f 92       	push	r6
 602:	7f 92       	push	r7
 604:	af 92       	push	r10
 606:	bf 92       	push	r11
 608:	cf 92       	push	r12
 60a:	df 92       	push	r13
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	28 97       	sbiw	r28, 0x08	; 8
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
 628:	29 01       	movw	r4, r18
 62a:	3a 01       	movw	r6, r20
 62c:	ed 82       	std	Y+5, r14	; 0x05
 62e:	fe 82       	std	Y+6, r15	; 0x06
 630:	0f 83       	std	Y+7, r16	; 0x07
 632:	18 87       	std	Y+8, r17	; 0x08
 634:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 638:	69 83       	std	Y+1, r22	; 0x01
 63a:	7a 83       	std	Y+2, r23	; 0x02
 63c:	8b 83       	std	Y+3, r24	; 0x03
 63e:	9c 83       	std	Y+4, r25	; 0x04
 640:	a6 01       	movw	r20, r12
 642:	95 01       	movw	r18, r10
 644:	69 8d       	ldd	r22, Y+25	; 0x19
 646:	7a 8d       	ldd	r23, Y+26	; 0x1a
 648:	8b 8d       	ldd	r24, Y+27	; 0x1b
 64a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 64c:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 650:	9b 01       	movw	r18, r22
 652:	ac 01       	movw	r20, r24
 654:	69 81       	ldd	r22, Y+1	; 0x01
 656:	7a 81       	ldd	r23, Y+2	; 0x02
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	9c 81       	ldd	r25, Y+4	; 0x04
 65c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__mulsf3>
 660:	69 83       	std	Y+1, r22	; 0x01
 662:	7a 83       	std	Y+2, r23	; 0x02
 664:	8b 83       	std	Y+3, r24	; 0x03
 666:	9c 83       	std	Y+4, r25	; 0x04
 668:	a3 01       	movw	r20, r6
 66a:	92 01       	movw	r18, r4
 66c:	c8 01       	movw	r24, r16
 66e:	b7 01       	movw	r22, r14
 670:	0e 94 b5 03 	call	0x76a	; 0x76a <__subsf3>
 674:	9b 01       	movw	r18, r22
 676:	ac 01       	movw	r20, r24
 678:	69 81       	ldd	r22, Y+1	; 0x01
 67a:	7a 81       	ldd	r23, Y+2	; 0x02
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	9c 81       	ldd	r25, Y+4	; 0x04
 680:	0e 94 22 04 	call	0x844	; 0x844 <__divsf3>
 684:	9b 01       	movw	r18, r22
 686:	ac 01       	movw	r20, r24
 688:	c6 01       	movw	r24, r12
 68a:	b5 01       	movw	r22, r10
 68c:	0e 94 b6 03 	call	0x76c	; 0x76c <__addsf3>
 690:	28 96       	adiw	r28, 0x08	; 8
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	df 90       	pop	r13
 6aa:	cf 90       	pop	r12
 6ac:	bf 90       	pop	r11
 6ae:	af 90       	pop	r10
 6b0:	7f 90       	pop	r7
 6b2:	6f 90       	pop	r6
 6b4:	5f 90       	pop	r5
 6b6:	4f 90       	pop	r4
 6b8:	08 95       	ret

000006ba <initPWM2A>:
 6ba:	94 b1       	in	r25, 0x04	; 4
 6bc:	98 60       	ori	r25, 0x08	; 8
 6be:	94 b9       	out	0x04, r25	; 4
 6c0:	e0 eb       	ldi	r30, 0xB0	; 176
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	90 81       	ld	r25, Z
 6c6:	93 60       	ori	r25, 0x03	; 3
 6c8:	90 83       	st	Z, r25
 6ca:	88 23       	and	r24, r24
 6cc:	21 f0       	breq	.+8      	; 0x6d6 <initPWM2A+0x1c>
 6ce:	80 81       	ld	r24, Z
 6d0:	80 6c       	ori	r24, 0xC0	; 192
 6d2:	80 83       	st	Z, r24
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <initPWM2A+0x26>
 6d6:	e0 eb       	ldi	r30, 0xB0	; 176
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	80 83       	st	Z, r24
 6e0:	61 15       	cp	r22, r1
 6e2:	74 40       	sbci	r23, 0x04	; 4
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <initPWM2A+0x38>
 6e6:	e1 eb       	ldi	r30, 0xB1	; 177
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	87 60       	ori	r24, 0x07	; 7
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret
 6f2:	e1 eb       	ldi	r30, 0xB1	; 177
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
 6fc:	08 95       	ret

000006fe <updateDutyCA2>:
	}
}


void updateDutyCA2(uint8_t duty){
 6fe:	af 92       	push	r10
 700:	bf 92       	push	r11
 702:	cf 92       	push	r12
 704:	df 92       	push	r13
 706:	ef 92       	push	r14
 708:	ff 92       	push	r15
 70a:	0f 93       	push	r16
 70c:	1f 93       	push	r17
	OCR2A = map1(duty,0,255,6,36);
 70e:	68 2f       	mov	r22, r24
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 c3 04 	call	0x986	; 0x986 <__floatunsisf>
 71a:	22 e4       	ldi	r18, 0x42	; 66
 71c:	2f 93       	push	r18
 71e:	20 e1       	ldi	r18, 0x10	; 16
 720:	2f 93       	push	r18
 722:	1f 92       	push	r1
 724:	1f 92       	push	r1
 726:	0f 2e       	mov	r0, r31
 728:	a1 2c       	mov	r10, r1
 72a:	b1 2c       	mov	r11, r1
 72c:	f0 ec       	ldi	r31, 0xC0	; 192
 72e:	cf 2e       	mov	r12, r31
 730:	f0 e4       	ldi	r31, 0x40	; 64
 732:	df 2e       	mov	r13, r31
 734:	f0 2d       	mov	r31, r0
 736:	e1 2c       	mov	r14, r1
 738:	f1 2c       	mov	r15, r1
 73a:	0f e7       	ldi	r16, 0x7F	; 127
 73c:	13 e4       	ldi	r17, 0x43	; 67
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	a9 01       	movw	r20, r18
 744:	0e 94 fe 02 	call	0x5fc	; 0x5fc <map1>
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0e 94 94 04 	call	0x928	; 0x928 <__fixunssfsi>
 754:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	ff 90       	pop	r15
 75e:	ef 90       	pop	r14
 760:	df 90       	pop	r13
 762:	cf 90       	pop	r12
 764:	bf 90       	pop	r11
 766:	af 90       	pop	r10
 768:	08 95       	ret

0000076a <__subsf3>:
 76a:	50 58       	subi	r21, 0x80	; 128

0000076c <__addsf3>:
 76c:	bb 27       	eor	r27, r27
 76e:	aa 27       	eor	r26, r26
 770:	0e 94 cd 03 	call	0x79a	; 0x79a <__addsf3x>
 774:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_round>
 778:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_pscA>
 77c:	38 f0       	brcs	.+14     	; 0x78c <__addsf3+0x20>
 77e:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_pscB>
 782:	20 f0       	brcs	.+8      	; 0x78c <__addsf3+0x20>
 784:	39 f4       	brne	.+14     	; 0x794 <__addsf3+0x28>
 786:	9f 3f       	cpi	r25, 0xFF	; 255
 788:	19 f4       	brne	.+6      	; 0x790 <__addsf3+0x24>
 78a:	26 f4       	brtc	.+8      	; 0x794 <__addsf3+0x28>
 78c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_nan>
 790:	0e f4       	brtc	.+2      	; 0x794 <__addsf3+0x28>
 792:	e0 95       	com	r30
 794:	e7 fb       	bst	r30, 7
 796:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_inf>

0000079a <__addsf3x>:
 79a:	e9 2f       	mov	r30, r25
 79c:	0e 94 28 05 	call	0xa50	; 0xa50 <__fp_split3>
 7a0:	58 f3       	brcs	.-42     	; 0x778 <__addsf3+0xc>
 7a2:	ba 17       	cp	r27, r26
 7a4:	62 07       	cpc	r22, r18
 7a6:	73 07       	cpc	r23, r19
 7a8:	84 07       	cpc	r24, r20
 7aa:	95 07       	cpc	r25, r21
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__addsf3x+0x1c>
 7ae:	79 f4       	brne	.+30     	; 0x7ce <__addsf3x+0x34>
 7b0:	a6 f5       	brtc	.+104    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7b2:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_zero>
 7b6:	0e f4       	brtc	.+2      	; 0x7ba <__addsf3x+0x20>
 7b8:	e0 95       	com	r30
 7ba:	0b 2e       	mov	r0, r27
 7bc:	ba 2f       	mov	r27, r26
 7be:	a0 2d       	mov	r26, r0
 7c0:	0b 01       	movw	r0, r22
 7c2:	b9 01       	movw	r22, r18
 7c4:	90 01       	movw	r18, r0
 7c6:	0c 01       	movw	r0, r24
 7c8:	ca 01       	movw	r24, r20
 7ca:	a0 01       	movw	r20, r0
 7cc:	11 24       	eor	r1, r1
 7ce:	ff 27       	eor	r31, r31
 7d0:	59 1b       	sub	r21, r25
 7d2:	99 f0       	breq	.+38     	; 0x7fa <__addsf3x+0x60>
 7d4:	59 3f       	cpi	r21, 0xF9	; 249
 7d6:	50 f4       	brcc	.+20     	; 0x7ec <__addsf3x+0x52>
 7d8:	50 3e       	cpi	r21, 0xE0	; 224
 7da:	68 f1       	brcs	.+90     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7dc:	1a 16       	cp	r1, r26
 7de:	f0 40       	sbci	r31, 0x00	; 0
 7e0:	a2 2f       	mov	r26, r18
 7e2:	23 2f       	mov	r18, r19
 7e4:	34 2f       	mov	r19, r20
 7e6:	44 27       	eor	r20, r20
 7e8:	58 5f       	subi	r21, 0xF8	; 248
 7ea:	f3 cf       	rjmp	.-26     	; 0x7d2 <__addsf3x+0x38>
 7ec:	46 95       	lsr	r20
 7ee:	37 95       	ror	r19
 7f0:	27 95       	ror	r18
 7f2:	a7 95       	ror	r26
 7f4:	f0 40       	sbci	r31, 0x00	; 0
 7f6:	53 95       	inc	r21
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__addsf3x+0x52>
 7fa:	7e f4       	brtc	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fc:	1f 16       	cp	r1, r31
 7fe:	ba 0b       	sbc	r27, r26
 800:	62 0b       	sbc	r22, r18
 802:	73 0b       	sbc	r23, r19
 804:	84 0b       	sbc	r24, r20
 806:	ba f0       	brmi	.+46     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 808:	91 50       	subi	r25, 0x01	; 1
 80a:	a1 f0       	breq	.+40     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 80c:	ff 0f       	add	r31, r31
 80e:	bb 1f       	adc	r27, r27
 810:	66 1f       	adc	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	c2 f7       	brpl	.-16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 818:	0e c0       	rjmp	.+28     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 81a:	ba 0f       	add	r27, r26
 81c:	62 1f       	adc	r22, r18
 81e:	73 1f       	adc	r23, r19
 820:	84 1f       	adc	r24, r20
 822:	48 f4       	brcc	.+18     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 824:	87 95       	ror	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b7 95       	ror	r27
 82c:	f7 95       	ror	r31
 82e:	9e 3f       	cpi	r25, 0xFE	; 254
 830:	08 f0       	brcs	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	b0 cf       	rjmp	.-160    	; 0x794 <__addsf3+0x28>
 834:	93 95       	inc	r25
 836:	88 0f       	add	r24, r24
 838:	08 f0       	brcs	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 83a:	99 27       	eor	r25, r25
 83c:	ee 0f       	add	r30, r30
 83e:	97 95       	ror	r25
 840:	87 95       	ror	r24
 842:	08 95       	ret

00000844 <__divsf3>:
 844:	0e 94 36 04 	call	0x86c	; 0x86c <__divsf3x>
 848:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_round>
 84c:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_pscB>
 850:	58 f0       	brcs	.+22     	; 0x868 <__divsf3+0x24>
 852:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_pscA>
 856:	40 f0       	brcs	.+16     	; 0x868 <__divsf3+0x24>
 858:	29 f4       	brne	.+10     	; 0x864 <__divsf3+0x20>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x24>
 85e:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_inf>
 862:	51 11       	cpse	r21, r1
 864:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_szero>
 868:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_nan>

0000086c <__divsf3x>:
 86c:	0e 94 28 05 	call	0xa50	; 0xa50 <__fp_split3>
 870:	68 f3       	brcs	.-38     	; 0x84c <__divsf3+0x8>

00000872 <__divsf3_pse>:
 872:	99 23       	and	r25, r25
 874:	b1 f3       	breq	.-20     	; 0x862 <__divsf3+0x1e>
 876:	55 23       	and	r21, r21
 878:	91 f3       	breq	.-28     	; 0x85e <__divsf3+0x1a>
 87a:	95 1b       	sub	r25, r21
 87c:	55 0b       	sbc	r21, r21
 87e:	bb 27       	eor	r27, r27
 880:	aa 27       	eor	r26, r26
 882:	62 17       	cp	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	38 f0       	brcs	.+14     	; 0x898 <__divsf3_pse+0x26>
 88a:	9f 5f       	subi	r25, 0xFF	; 255
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	22 0f       	add	r18, r18
 890:	33 1f       	adc	r19, r19
 892:	44 1f       	adc	r20, r20
 894:	aa 1f       	adc	r26, r26
 896:	a9 f3       	breq	.-22     	; 0x882 <__divsf3_pse+0x10>
 898:	35 d0       	rcall	.+106    	; 0x904 <__stack+0x5>
 89a:	0e 2e       	mov	r0, r30
 89c:	3a f0       	brmi	.+14     	; 0x8ac <__divsf3_pse+0x3a>
 89e:	e0 e8       	ldi	r30, 0x80	; 128
 8a0:	32 d0       	rcall	.+100    	; 0x906 <__stack+0x7>
 8a2:	91 50       	subi	r25, 0x01	; 1
 8a4:	50 40       	sbci	r21, 0x00	; 0
 8a6:	e6 95       	lsr	r30
 8a8:	00 1c       	adc	r0, r0
 8aa:	ca f7       	brpl	.-14     	; 0x89e <__divsf3_pse+0x2c>
 8ac:	2b d0       	rcall	.+86     	; 0x904 <__stack+0x5>
 8ae:	fe 2f       	mov	r31, r30
 8b0:	29 d0       	rcall	.+82     	; 0x904 <__stack+0x5>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	bb 1f       	adc	r27, r27
 8ba:	26 17       	cp	r18, r22
 8bc:	37 07       	cpc	r19, r23
 8be:	48 07       	cpc	r20, r24
 8c0:	ab 07       	cpc	r26, r27
 8c2:	b0 e8       	ldi	r27, 0x80	; 128
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__divsf3_pse+0x56>
 8c6:	bb 0b       	sbc	r27, r27
 8c8:	80 2d       	mov	r24, r0
 8ca:	bf 01       	movw	r22, r30
 8cc:	ff 27       	eor	r31, r31
 8ce:	93 58       	subi	r25, 0x83	; 131
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	3a f0       	brmi	.+14     	; 0x8e2 <__divsf3_pse+0x70>
 8d4:	9e 3f       	cpi	r25, 0xFE	; 254
 8d6:	51 05       	cpc	r21, r1
 8d8:	78 f0       	brcs	.+30     	; 0x8f8 <__divsf3_pse+0x86>
 8da:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_inf>
 8de:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_szero>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	e4 f3       	brlt	.-8      	; 0x8de <__divsf3_pse+0x6c>
 8e6:	98 3e       	cpi	r25, 0xE8	; 232
 8e8:	d4 f3       	brlt	.-12     	; 0x8de <__divsf3_pse+0x6c>
 8ea:	86 95       	lsr	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	b7 95       	ror	r27
 8f2:	f7 95       	ror	r31
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	c9 f7       	brne	.-14     	; 0x8ea <__divsf3_pse+0x78>
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret
 904:	e1 e0       	ldi	r30, 0x01	; 1
 906:	66 0f       	add	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	bb 1f       	adc	r27, r27
 90e:	62 17       	cp	r22, r18
 910:	73 07       	cpc	r23, r19
 912:	84 07       	cpc	r24, r20
 914:	ba 07       	cpc	r27, r26
 916:	20 f0       	brcs	.+8      	; 0x920 <__stack+0x21>
 918:	62 1b       	sub	r22, r18
 91a:	73 0b       	sbc	r23, r19
 91c:	84 0b       	sbc	r24, r20
 91e:	ba 0b       	sbc	r27, r26
 920:	ee 1f       	adc	r30, r30
 922:	88 f7       	brcc	.-30     	; 0x906 <__stack+0x7>
 924:	e0 95       	com	r30
 926:	08 95       	ret

00000928 <__fixunssfsi>:
 928:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_splitA>
 92c:	88 f0       	brcs	.+34     	; 0x950 <__fixunssfsi+0x28>
 92e:	9f 57       	subi	r25, 0x7F	; 127
 930:	98 f0       	brcs	.+38     	; 0x958 <__fixunssfsi+0x30>
 932:	b9 2f       	mov	r27, r25
 934:	99 27       	eor	r25, r25
 936:	b7 51       	subi	r27, 0x17	; 23
 938:	b0 f0       	brcs	.+44     	; 0x966 <__fixunssfsi+0x3e>
 93a:	e1 f0       	breq	.+56     	; 0x974 <__fixunssfsi+0x4c>
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	1a f0       	brmi	.+6      	; 0x94c <__fixunssfsi+0x24>
 946:	ba 95       	dec	r27
 948:	c9 f7       	brne	.-14     	; 0x93c <__fixunssfsi+0x14>
 94a:	14 c0       	rjmp	.+40     	; 0x974 <__fixunssfsi+0x4c>
 94c:	b1 30       	cpi	r27, 0x01	; 1
 94e:	91 f0       	breq	.+36     	; 0x974 <__fixunssfsi+0x4c>
 950:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_zero>
 954:	b1 e0       	ldi	r27, 0x01	; 1
 956:	08 95       	ret
 958:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_zero>
 95c:	67 2f       	mov	r22, r23
 95e:	78 2f       	mov	r23, r24
 960:	88 27       	eor	r24, r24
 962:	b8 5f       	subi	r27, 0xF8	; 248
 964:	39 f0       	breq	.+14     	; 0x974 <__fixunssfsi+0x4c>
 966:	b9 3f       	cpi	r27, 0xF9	; 249
 968:	cc f3       	brlt	.-14     	; 0x95c <__fixunssfsi+0x34>
 96a:	86 95       	lsr	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b3 95       	inc	r27
 972:	d9 f7       	brne	.-10     	; 0x96a <__fixunssfsi+0x42>
 974:	3e f4       	brtc	.+14     	; 0x984 <__fixunssfsi+0x5c>
 976:	90 95       	com	r25
 978:	80 95       	com	r24
 97a:	70 95       	com	r23
 97c:	61 95       	neg	r22
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	08 95       	ret

00000986 <__floatunsisf>:
 986:	e8 94       	clt
 988:	09 c0       	rjmp	.+18     	; 0x99c <__floatsisf+0x12>

0000098a <__floatsisf>:
 98a:	97 fb       	bst	r25, 7
 98c:	3e f4       	brtc	.+14     	; 0x99c <__floatsisf+0x12>
 98e:	90 95       	com	r25
 990:	80 95       	com	r24
 992:	70 95       	com	r23
 994:	61 95       	neg	r22
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	99 23       	and	r25, r25
 99e:	a9 f0       	breq	.+42     	; 0x9ca <__floatsisf+0x40>
 9a0:	f9 2f       	mov	r31, r25
 9a2:	96 e9       	ldi	r25, 0x96	; 150
 9a4:	bb 27       	eor	r27, r27
 9a6:	93 95       	inc	r25
 9a8:	f6 95       	lsr	r31
 9aa:	87 95       	ror	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f1 11       	cpse	r31, r1
 9b4:	f8 cf       	rjmp	.-16     	; 0x9a6 <__floatsisf+0x1c>
 9b6:	fa f4       	brpl	.+62     	; 0x9f6 <__floatsisf+0x6c>
 9b8:	bb 0f       	add	r27, r27
 9ba:	11 f4       	brne	.+4      	; 0x9c0 <__floatsisf+0x36>
 9bc:	60 ff       	sbrs	r22, 0
 9be:	1b c0       	rjmp	.+54     	; 0x9f6 <__floatsisf+0x6c>
 9c0:	6f 5f       	subi	r22, 0xFF	; 255
 9c2:	7f 4f       	sbci	r23, 0xFF	; 255
 9c4:	8f 4f       	sbci	r24, 0xFF	; 255
 9c6:	9f 4f       	sbci	r25, 0xFF	; 255
 9c8:	16 c0       	rjmp	.+44     	; 0x9f6 <__floatsisf+0x6c>
 9ca:	88 23       	and	r24, r24
 9cc:	11 f0       	breq	.+4      	; 0x9d2 <__floatsisf+0x48>
 9ce:	96 e9       	ldi	r25, 0x96	; 150
 9d0:	11 c0       	rjmp	.+34     	; 0x9f4 <__floatsisf+0x6a>
 9d2:	77 23       	and	r23, r23
 9d4:	21 f0       	breq	.+8      	; 0x9de <__floatsisf+0x54>
 9d6:	9e e8       	ldi	r25, 0x8E	; 142
 9d8:	87 2f       	mov	r24, r23
 9da:	76 2f       	mov	r23, r22
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__floatsisf+0x5e>
 9de:	66 23       	and	r22, r22
 9e0:	71 f0       	breq	.+28     	; 0x9fe <__floatsisf+0x74>
 9e2:	96 e8       	ldi	r25, 0x86	; 134
 9e4:	86 2f       	mov	r24, r22
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	2a f0       	brmi	.+10     	; 0x9f6 <__floatsisf+0x6c>
 9ec:	9a 95       	dec	r25
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	da f7       	brpl	.-10     	; 0x9ec <__floatsisf+0x62>
 9f6:	88 0f       	add	r24, r24
 9f8:	96 95       	lsr	r25
 9fa:	87 95       	ror	r24
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <__fp_inf>:
 a00:	97 f9       	bld	r25, 7
 a02:	9f 67       	ori	r25, 0x7F	; 127
 a04:	80 e8       	ldi	r24, 0x80	; 128
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	08 95       	ret

00000a0c <__fp_nan>:
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	80 ec       	ldi	r24, 0xC0	; 192
 a10:	08 95       	ret

00000a12 <__fp_pscA>:
 a12:	00 24       	eor	r0, r0
 a14:	0a 94       	dec	r0
 a16:	16 16       	cp	r1, r22
 a18:	17 06       	cpc	r1, r23
 a1a:	18 06       	cpc	r1, r24
 a1c:	09 06       	cpc	r0, r25
 a1e:	08 95       	ret

00000a20 <__fp_pscB>:
 a20:	00 24       	eor	r0, r0
 a22:	0a 94       	dec	r0
 a24:	12 16       	cp	r1, r18
 a26:	13 06       	cpc	r1, r19
 a28:	14 06       	cpc	r1, r20
 a2a:	05 06       	cpc	r0, r21
 a2c:	08 95       	ret

00000a2e <__fp_round>:
 a2e:	09 2e       	mov	r0, r25
 a30:	03 94       	inc	r0
 a32:	00 0c       	add	r0, r0
 a34:	11 f4       	brne	.+4      	; 0xa3a <__fp_round+0xc>
 a36:	88 23       	and	r24, r24
 a38:	52 f0       	brmi	.+20     	; 0xa4e <__fp_round+0x20>
 a3a:	bb 0f       	add	r27, r27
 a3c:	40 f4       	brcc	.+16     	; 0xa4e <__fp_round+0x20>
 a3e:	bf 2b       	or	r27, r31
 a40:	11 f4       	brne	.+4      	; 0xa46 <__fp_round+0x18>
 a42:	60 ff       	sbrs	r22, 0
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <__fp_round+0x20>
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	08 95       	ret

00000a50 <__fp_split3>:
 a50:	57 fd       	sbrc	r21, 7
 a52:	90 58       	subi	r25, 0x80	; 128
 a54:	44 0f       	add	r20, r20
 a56:	55 1f       	adc	r21, r21
 a58:	59 f0       	breq	.+22     	; 0xa70 <__fp_splitA+0x10>
 a5a:	5f 3f       	cpi	r21, 0xFF	; 255
 a5c:	71 f0       	breq	.+28     	; 0xa7a <__fp_splitA+0x1a>
 a5e:	47 95       	ror	r20

00000a60 <__fp_splitA>:
 a60:	88 0f       	add	r24, r24
 a62:	97 fb       	bst	r25, 7
 a64:	99 1f       	adc	r25, r25
 a66:	61 f0       	breq	.+24     	; 0xa80 <__fp_splitA+0x20>
 a68:	9f 3f       	cpi	r25, 0xFF	; 255
 a6a:	79 f0       	breq	.+30     	; 0xa8a <__fp_splitA+0x2a>
 a6c:	87 95       	ror	r24
 a6e:	08 95       	ret
 a70:	12 16       	cp	r1, r18
 a72:	13 06       	cpc	r1, r19
 a74:	14 06       	cpc	r1, r20
 a76:	55 1f       	adc	r21, r21
 a78:	f2 cf       	rjmp	.-28     	; 0xa5e <__fp_split3+0xe>
 a7a:	46 95       	lsr	r20
 a7c:	f1 df       	rcall	.-30     	; 0xa60 <__fp_splitA>
 a7e:	08 c0       	rjmp	.+16     	; 0xa90 <__fp_splitA+0x30>
 a80:	16 16       	cp	r1, r22
 a82:	17 06       	cpc	r1, r23
 a84:	18 06       	cpc	r1, r24
 a86:	99 1f       	adc	r25, r25
 a88:	f1 cf       	rjmp	.-30     	; 0xa6c <__fp_splitA+0xc>
 a8a:	86 95       	lsr	r24
 a8c:	71 05       	cpc	r23, r1
 a8e:	61 05       	cpc	r22, r1
 a90:	08 94       	sec
 a92:	08 95       	ret

00000a94 <__fp_zero>:
 a94:	e8 94       	clt

00000a96 <__fp_szero>:
 a96:	bb 27       	eor	r27, r27
 a98:	66 27       	eor	r22, r22
 a9a:	77 27       	eor	r23, r23
 a9c:	cb 01       	movw	r24, r22
 a9e:	97 f9       	bld	r25, 7
 aa0:	08 95       	ret

00000aa2 <__mulsf3>:
 aa2:	0e 94 64 05 	call	0xac8	; 0xac8 <__mulsf3x>
 aa6:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_round>
 aaa:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_pscA>
 aae:	38 f0       	brcs	.+14     	; 0xabe <__mulsf3+0x1c>
 ab0:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_pscB>
 ab4:	20 f0       	brcs	.+8      	; 0xabe <__mulsf3+0x1c>
 ab6:	95 23       	and	r25, r21
 ab8:	11 f0       	breq	.+4      	; 0xabe <__mulsf3+0x1c>
 aba:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_inf>
 abe:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_nan>
 ac2:	11 24       	eor	r1, r1
 ac4:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_szero>

00000ac8 <__mulsf3x>:
 ac8:	0e 94 28 05 	call	0xa50	; 0xa50 <__fp_split3>
 acc:	70 f3       	brcs	.-36     	; 0xaaa <__mulsf3+0x8>

00000ace <__mulsf3_pse>:
 ace:	95 9f       	mul	r25, r21
 ad0:	c1 f3       	breq	.-16     	; 0xac2 <__mulsf3+0x20>
 ad2:	95 0f       	add	r25, r21
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	55 1f       	adc	r21, r21
 ad8:	62 9f       	mul	r22, r18
 ada:	f0 01       	movw	r30, r0
 adc:	72 9f       	mul	r23, r18
 ade:	bb 27       	eor	r27, r27
 ae0:	f0 0d       	add	r31, r0
 ae2:	b1 1d       	adc	r27, r1
 ae4:	63 9f       	mul	r22, r19
 ae6:	aa 27       	eor	r26, r26
 ae8:	f0 0d       	add	r31, r0
 aea:	b1 1d       	adc	r27, r1
 aec:	aa 1f       	adc	r26, r26
 aee:	64 9f       	mul	r22, r20
 af0:	66 27       	eor	r22, r22
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	66 1f       	adc	r22, r22
 af8:	82 9f       	mul	r24, r18
 afa:	22 27       	eor	r18, r18
 afc:	b0 0d       	add	r27, r0
 afe:	a1 1d       	adc	r26, r1
 b00:	62 1f       	adc	r22, r18
 b02:	73 9f       	mul	r23, r19
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	62 1f       	adc	r22, r18
 b0a:	83 9f       	mul	r24, r19
 b0c:	a0 0d       	add	r26, r0
 b0e:	61 1d       	adc	r22, r1
 b10:	22 1f       	adc	r18, r18
 b12:	74 9f       	mul	r23, r20
 b14:	33 27       	eor	r19, r19
 b16:	a0 0d       	add	r26, r0
 b18:	61 1d       	adc	r22, r1
 b1a:	23 1f       	adc	r18, r19
 b1c:	84 9f       	mul	r24, r20
 b1e:	60 0d       	add	r22, r0
 b20:	21 1d       	adc	r18, r1
 b22:	82 2f       	mov	r24, r18
 b24:	76 2f       	mov	r23, r22
 b26:	6a 2f       	mov	r22, r26
 b28:	11 24       	eor	r1, r1
 b2a:	9f 57       	subi	r25, 0x7F	; 127
 b2c:	50 40       	sbci	r21, 0x00	; 0
 b2e:	9a f0       	brmi	.+38     	; 0xb56 <__mulsf3_pse+0x88>
 b30:	f1 f0       	breq	.+60     	; 0xb6e <__mulsf3_pse+0xa0>
 b32:	88 23       	and	r24, r24
 b34:	4a f0       	brmi	.+18     	; 0xb48 <__mulsf3_pse+0x7a>
 b36:	ee 0f       	add	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	bb 1f       	adc	r27, r27
 b3c:	66 1f       	adc	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	91 50       	subi	r25, 0x01	; 1
 b44:	50 40       	sbci	r21, 0x00	; 0
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__mulsf3_pse+0x64>
 b48:	9e 3f       	cpi	r25, 0xFE	; 254
 b4a:	51 05       	cpc	r21, r1
 b4c:	80 f0       	brcs	.+32     	; 0xb6e <__mulsf3_pse+0xa0>
 b4e:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_inf>
 b52:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_szero>
 b56:	5f 3f       	cpi	r21, 0xFF	; 255
 b58:	e4 f3       	brlt	.-8      	; 0xb52 <__mulsf3_pse+0x84>
 b5a:	98 3e       	cpi	r25, 0xE8	; 232
 b5c:	d4 f3       	brlt	.-12     	; 0xb52 <__mulsf3_pse+0x84>
 b5e:	86 95       	lsr	r24
 b60:	77 95       	ror	r23
 b62:	67 95       	ror	r22
 b64:	b7 95       	ror	r27
 b66:	f7 95       	ror	r31
 b68:	e7 95       	ror	r30
 b6a:	9f 5f       	subi	r25, 0xFF	; 255
 b6c:	c1 f7       	brne	.-16     	; 0xb5e <__mulsf3_pse+0x90>
 b6e:	fe 2b       	or	r31, r30
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret

00000b7c <_exit>:
 b7c:	f8 94       	cli

00000b7e <__stop_program>:
 b7e:	ff cf       	rjmp	.-2      	; 0xb7e <__stop_program>
