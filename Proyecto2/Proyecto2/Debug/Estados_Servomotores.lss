
Estados_Servomotores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000fb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001028  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001711  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a62  00000000  00000000  000028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c69  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00003f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000640  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea6  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  88:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
// Configuración para el ADC.

#include "ADC.h"

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		// VREF = AVCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		// VREF = AVCC
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);		// JUSTIFICACION A LA DERECHA
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);		// ENCIENDER EL ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// HABILITAR ISR ADC
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);		// PRESCALES 128 -> 16M = 125kHz
  c6:	80 81       	ld	r24, Z
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	80 83       	st	Z, r24
	
	//Entradas para los potenciometros.
	
	DIDR0 |= (1 << ADC0D);		// DESABILITAR LA ENTRADA DIGITAL PC0
  cc:	ee e7       	ldi	r30, 0x7E	; 126
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC1D);		// DESABILITAR LA ENTRADA DIGITAL PC1
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC2D);		// DESABILITAR LA ENTRADA DIGITAL PC2
  dc:	80 81       	ld	r24, Z
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC3D);		// DESABILITAR LA ENTRADA DIGITAL PC3
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <ADC_CONVERT>:
}

uint8_t ADC_CONVERT(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// SELECCION DEL CANAL
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	89 2b       	or	r24, r25
  f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);			// INICIA EL ADC
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));		// FINALIZA LA CONVERSION
 100:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 104:	86 fd       	sbrc	r24, 6
 106:	fc cf       	rjmp	.-8      	; 0x100 <ADC_CONVERT+0x16>
	return(ADCH);
 108:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10c:	08 95       	ret

0000010e <INT0_ISR>:
	PCICR |= (1<<PCIE2);
}

//Configuración de entradas generales
void setup (void){
	DDRC = 0;		// PUERTO C COMO ENTRADA
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8d bb       	out	0x1d, r24	; 29
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	81 61       	ori	r24, 0x11	; 17
 11c:	84 b9       	out	0x04, r24	; 4
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	85 b9       	out	0x05, r24	; 5
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8a b9       	out	0x0a, r24	; 10
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8f 77       	andi	r24, 0x7F	; 127
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	84 60       	ori	r24, 0x04	; 4
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	08 95       	ret

0000013c <INT_PCINT2>:
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	8a b9       	out	0x0a, r24	; 10
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	88 62       	ori	r24, 0x28	; 40
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	ed e6       	ldi	r30, 0x6D	; 109
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 62       	ori	r24, 0x28	; 40
 156:	80 83       	st	Z, r24
 158:	e8 e6       	ldi	r30, 0x68	; 104
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <entradas_ADC>:
	
}

//Se define la función de las entradas de ADC y modificación de servomotores
void entradas_ADC(void){
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	DutyC1 = ADC_CONVERT(7);
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 172:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DutyC1>
	updateDutyCA1(DutyC1);
 176:	0e 94 58 04 	call	0x8b0	; 0x8b0 <updateDutyCA1>
	ADMUX &= 0xF0;
 17a:	cc e7       	ldi	r28, 0x7C	; 124
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	88 81       	ld	r24, Y
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 184:	88 81       	ld	r24, Y
 186:	87 60       	ori	r24, 0x07	; 7
 188:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
 18a:	0a e7       	ldi	r16, 0x7A	; 122
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	f8 01       	movw	r30, r16
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <entradas_ADC+0x36>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <entradas_ADC+0x3c>
 1a0:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC2 = ADC_CONVERT(6);
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 1a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DutyC2>
	updateDutyCA2(DutyC2);
 1ac:	0e 94 49 05 	call	0xa92	; 0xa92 <updateDutyCA2>
	ADMUX &= 0xF0;
 1b0:	88 81       	ld	r24, Y
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);
 1b6:	88 81       	ld	r24, Y
 1b8:	86 60       	ori	r24, 0x06	; 6
 1ba:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
 1bc:	f8 01       	movw	r30, r16
 1be:	80 81       	ld	r24, Z
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	80 83       	st	Z, r24
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
 1c6:	9c e9       	ldi	r25, 0x9C	; 156
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <entradas_ADC+0x64>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <entradas_ADC+0x6a>
 1ce:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC3 = ADC_CONVERT(5);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 1d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DutyC3>
	updateDutyCB1(DutyC3);
 1da:	0e 94 90 04 	call	0x920	; 0x920 <updateDutyCB1>
	ADMUX &= 0xF0;
 1de:	88 81       	ld	r24, Y
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0);
 1e4:	88 81       	ld	r24, Y
 1e6:	85 60       	ori	r24, 0x05	; 5
 1e8:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
 1ea:	f8 01       	movw	r30, r16
 1ec:	80 81       	ld	r24, Z
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	80 83       	st	Z, r24
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9c e9       	ldi	r25, 0x9C	; 156
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <entradas_ADC+0x92>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <entradas_ADC+0x98>
 1fc:	00 00       	nop
	_delay_ms(10);
	
	
	DutyC4 = ADC_CONVERT(4);
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	0e 94 75 00 	call	0xea	; 0xea <ADC_CONVERT>
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DutyC4>
	updateDutyCycleA(DutyC4);
 208:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <updateDutyCycleA>
	ADMUX &= 0xF0;
 20c:	88 81       	ld	r24, Y
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	88 83       	st	Y, r24
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(0<<MUX0);
 212:	88 81       	ld	r24, Y
 214:	84 60       	ori	r24, 0x04	; 4
 216:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
 218:	f8 01       	movw	r30, r16
 21a:	80 81       	ld	r24, Z
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 83       	st	Z, r24
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <entradas_ADC+0xc0>
 228:	00 c0       	rjmp	.+0      	; 0x22a <entradas_ADC+0xc6>
 22a:	00 00       	nop
	_delay_ms(10);
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <main>:
uint8_t servo3 = 0;
uint8_t servo4 = 0;


int main(void){
	cli();			//Se desactivan las interupcciones Globales
 236:	f8 94       	cli
	
	//Configuración Inicial de los Timers
	TCCR1A = 0;
 238:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 23c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCCR2A = 0;
 240:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 244:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR0A = 0;
 248:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 24a:	15 bc       	out	0x25, r1	; 37

	initADC();
 24c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1A(no_invertido,8,39999);
 250:	4f e3       	ldi	r20, 0x3F	; 63
 252:	5c e9       	ldi	r21, 0x9C	; 156
 254:	68 e0       	ldi	r22, 0x08	; 8
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <initPWM1A>
	initPWM2A(no_invertido,1024);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	74 e0       	ldi	r23, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 27 05 	call	0xa4e	; 0xa4e <initPWM2A>
	
	initPWM1B(no_invertido,8,39999);
 268:	4f e3       	ldi	r20, 0x3F	; 63
 26a:	5c e9       	ldi	r21, 0x9C	; 156
 26c:	68 e0       	ldi	r22, 0x08	; 8
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 2b 04 	call	0x856	; 0x856 <initPWM1B>
	
	initPWM0FastA(no_invertido, 1024);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	74 e0       	ldi	r23, 0x04	; 4
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 57 03 	call	0x6ae	; 0x6ae <initPWM0FastA>

	INT0_ISR(); //Función de la interrupción INT0 -- PD2
 280:	0e 94 87 00 	call	0x10e	; 0x10e <INT0_ISR>
	
	INT_PCINT2();
 284:	0e 94 9e 00 	call	0x13c	; 0x13c <INT_PCINT2>
	
	sei();		//Se activan las interupcciones Globales
 288:	78 94       	sei
	
	while (1) {							//6 = 0°  36 = 180°   21 = 90°
		
		if (e == 0){				//Estado 0 -- Modo manual 1
 28a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <e>
 28e:	81 11       	cpse	r24, r1
 290:	0c c0       	rjmp	.+24     	; 0x2aa <main+0x74>
			// -> LEDS
			PORTB |= (1<<DDB4);		//Se enciende la led 1 - PB4
 292:	85 b1       	in	r24, 0x05	; 5
 294:	80 61       	ori	r24, 0x10	; 16
 296:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<DDB0);	//Se apaga la led 2 - PB0
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<DDD7);	//Se apaga la led 3 - PD7
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	8b b9       	out	0x0b, r24	; 11
			
			entradas_ADC();
 2a4:	0e 94 b2 00 	call	0x164	; 0x164 <entradas_ADC>
 2a8:	f0 cf       	rjmp	.-32     	; 0x28a <main+0x54>

		}
		else if (e == 1){			//Estado 1 -- Modo manual 2
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	31 f4       	brne	.+12     	; 0x2ba <main+0x84>
			// -> LEDS
			PORTD |= (1<<DDD7);		//Se enciende la led 3 - PD7
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8b b9       	out	0x0b, r24	; 11
			
			entradas_ADC();
 2b4:	0e 94 b2 00 	call	0x164	; 0x164 <entradas_ADC>
 2b8:	e8 cf       	rjmp	.-48     	; 0x28a <main+0x54>

		}
				
		else if (e == 2){			//Estado 2 -- Comunicación serial
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	51 f4       	brne	.+20     	; 0x2d2 <main+0x9c>
			// -> LEDS
			PORTB |= (1<<DDB0);		//Se enciende la led 2 - PB0
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<DDB4);	//Se apaga la led 1 - PB4
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8f 7e       	andi	r24, 0xEF	; 239
 2c8:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<DDD7);	//Se apaga la led 3 - PD7
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	dc cf       	rjmp	.-72     	; 0x28a <main+0x54>
			
		}
		else if (e == 3){			//Estado 3 -- Memoria Eprom 1
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <main+0xae>
			// -> LEDS
			PORTD |= (1<<DDD7);		//Se enciende la led 3 - PD7
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1<<DDB0);	//Se apaga la led 2 - PB0
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	85 b9       	out	0x05, r24	; 5
 2e2:	d3 cf       	rjmp	.-90     	; 0x28a <main+0x54>

		}
		else {						//Estado 4 -- Memoria Eprom 2
			// -> LEDS
			PORTB |= (1<<DDB0);		//Se enciende la led 2 - PB0
 2e4:	85 b1       	in	r24, 0x05	; 5
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	85 b9       	out	0x05, r24	; 5
 2ea:	cf cf       	rjmp	.-98     	; 0x28a <main+0x54>

000002ec <conf_servos>:
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(0<<MUX0);
	ADCSRA |= (1<<ADSC);
	_delay_ms(10);
}

void conf_servos(uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4){
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	16 2f       	mov	r17, r22
 2f4:	d4 2f       	mov	r29, r20
 2f6:	c2 2f       	mov	r28, r18
	updateDutyCA1(m1);
 2f8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <updateDutyCA1>
 2fc:	8f e3       	ldi	r24, 0x3F	; 63
 2fe:	9c e9       	ldi	r25, 0x9C	; 156
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <conf_servos+0x14>
 304:	00 c0       	rjmp	.+0      	; 0x306 <conf_servos+0x1a>
 306:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCA2(m2);
 308:	81 2f       	mov	r24, r17
 30a:	0e 94 49 05 	call	0xa92	; 0xa92 <updateDutyCA2>
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9c e9       	ldi	r25, 0x9C	; 156
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <conf_servos+0x26>
 316:	00 c0       	rjmp	.+0      	; 0x318 <conf_servos+0x2c>
 318:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCB1(m3);
 31a:	8d 2f       	mov	r24, r29
 31c:	0e 94 90 04 	call	0x920	; 0x920 <updateDutyCB1>
 320:	8f e3       	ldi	r24, 0x3F	; 63
 322:	9c e9       	ldi	r25, 0x9C	; 156
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <conf_servos+0x38>
 328:	00 c0       	rjmp	.+0      	; 0x32a <conf_servos+0x3e>
 32a:	00 00       	nop
	_delay_ms(10);
	
	updateDutyCycleA(m4);
 32c:	8c 2f       	mov	r24, r28
 32e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <updateDutyCycleA>
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	9c e9       	ldi	r25, 0x9C	; 156
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <conf_servos+0x4a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <conf_servos+0x50>
 33c:	00 00       	nop
	_delay_ms(10);
	
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	08 95       	ret

00000346 <__vector_1>:


//Configuración Vectores de interrupción

//--> Vector de interrupcion Externo INT0
ISR(INT0_vect){
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
	e++;		  //Se usa la variable "e" como contador de la maquina de estados
 352:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <e>
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <e>
	if(e == 5){
 35c:	85 30       	cpi	r24, 0x05	; 5
 35e:	11 f4       	brne	.+4      	; 0x364 <__vector_1+0x1e>
		e = 0;	  //Al llegar a 5 el contador, este se reinicia a 0--> Estado 0
 360:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <e>
	}
}
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_5>:

//--> Vector de interrupcion PCINT2
ISR(PCINT2_vect){
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	1f 93       	push	r17
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	if (e == 0){
 398:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <e>
 39c:	81 11       	cpse	r24, r1
 39e:	35 c0       	rjmp	.+106    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		if((PIND & (1<<PIND3))==0){
 3a0:	4b 99       	sbic	0x09, 3	; 9
 3a2:	18 c0       	rjmp	.+48     	; 0x3d4 <__vector_5+0x64>
			eeprom_write_byte((uint8_t*)0x00, DutyC1);
 3a4:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <DutyC1>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x01, DutyC2);
 3b0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <DutyC2>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x02, DutyC3);
 3bc:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC3>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x03, DutyC4);
 3c8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC4>
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
		}  //eSPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){
 3d4:	4d 99       	sbic	0x09, 5	; 9
 3d6:	e3 c0       	rjmp	.+454    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			eeprom_write_byte((uint8_t*)0x04, DutyC1);
 3d8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <DutyC1>
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x05, DutyC2);
 3e4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <DutyC2>
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x06, DutyC3);
 3f0:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC3>
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x07, DutyC4);
 3fc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC4>
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
 408:	ca c0       	rjmp	.+404    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	} 
	else if (e == 1){
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	a9 f5       	brne	.+106    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		if((PIND & (1<<PIND3))==0){
 40e:	4b 99       	sbic	0x09, 3	; 9
 410:	18 c0       	rjmp	.+48     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			eeprom_write_byte((uint8_t*)0x08, DutyC1);
 412:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <DutyC1>
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x09, DutyC2);
 41e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <DutyC2>
 422:	89 e0       	ldi	r24, 0x09	; 9
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0A, DutyC3);
 42a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC3>
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0B, DutyC4);
 436:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC4>
 43a:	8b e0       	ldi	r24, 0x0B	; 11
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
		} //eSPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){
 442:	4d 99       	sbic	0x09, 5	; 9
 444:	ac c0       	rjmp	.+344    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			eeprom_write_byte((uint8_t*)0x0C, DutyC1);
 446:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <DutyC1>
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0D, DutyC2);
 452:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <DutyC2>
 456:	8d e0       	ldi	r24, 0x0D	; 13
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0E, DutyC3);
 45e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <DutyC3>
 462:	8e e0       	ldi	r24, 0x0E	; 14
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)0x0F, DutyC4);
 46a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <DutyC4>
 46e:	8f e0       	ldi	r24, 0x0F	; 15
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 90 07 	call	0xf20	; 0xf20 <eeprom_write_byte>
 476:	93 c0       	rjmp	.+294    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
	}
	else if (e == 2){
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	09 f0       	breq	.+2      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47c:	47 c0       	rjmp	.+142    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
		if((PIND & (1<<PIND3))==0){
 47e:	4b 99       	sbic	0x09, 3	; 9
 480:	21 c0       	rjmp	.+66     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			//_delay_ms(10);
			servo1 = eeprom_read_byte((uint8_t*)0x00);
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 48a:	c8 2f       	mov	r28, r24
 48c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x01);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 498:	d8 2f       	mov	r29, r24
 49a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x02);
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4a6:	18 2f       	mov	r17, r24
 4a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x03);
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			conf_servos(servo1, servo2, servo3, servo4);
 4b8:	28 2f       	mov	r18, r24
 4ba:	41 2f       	mov	r20, r17
 4bc:	6d 2f       	mov	r22, r29
 4be:	8c 2f       	mov	r24, r28
 4c0:	0e 94 76 01 	call	0x2ec	; 0x2ec <conf_servos>
			
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){
 4c4:	4d 99       	sbic	0x09, 5	; 9
 4c6:	6b c0       	rjmp	.+214    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			//_delay_ms(10);
			servo1 = eeprom_read_byte((uint8_t*)0x04);
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4d0:	c8 2f       	mov	r28, r24
 4d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x05);
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4de:	d8 2f       	mov	r29, r24
 4e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x06);
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4ec:	18 2f       	mov	r17, r24
 4ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x07);
 4f2:	87 e0       	ldi	r24, 0x07	; 7
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 4fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			conf_servos(servo1, servo2, servo3, servo4);
 4fe:	28 2f       	mov	r18, r24
 500:	41 2f       	mov	r20, r17
 502:	6d 2f       	mov	r22, r29
 504:	8c 2f       	mov	r24, r28
 506:	0e 94 76 01 	call	0x2ec	; 0x2ec <conf_servos>
 50a:	49 c0       	rjmp	.+146    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		}//ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	}
	else if (e == 3){
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	09 f0       	breq	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 510:	46 c0       	rjmp	.+140    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		if((PIND & (1<<PIND3))==0){
 512:	4b 99       	sbic	0x09, 3	; 9
 514:	21 c0       	rjmp	.+66     	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
			servo1 = eeprom_read_byte((uint8_t*)0x08);
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 51e:	c8 2f       	mov	r28, r24
 520:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x09);
 524:	89 e0       	ldi	r24, 0x09	; 9
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 52c:	d8 2f       	mov	r29, r24
 52e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x0A);
 532:	8a e0       	ldi	r24, 0x0A	; 10
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 53a:	18 2f       	mov	r17, r24
 53c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x0B);
 540:	8b e0       	ldi	r24, 0x0B	; 11
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 548:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			conf_servos(servo1, servo2, servo3, servo4);
 54c:	28 2f       	mov	r18, r24
 54e:	41 2f       	mov	r20, r17
 550:	6d 2f       	mov	r22, r29
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 76 01 	call	0x2ec	; 0x2ec <conf_servos>
		} //ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
		
		if((PIND & (1<<PIND5))==0){
 558:	4d 99       	sbic	0x09, 5	; 9
 55a:	21 c0       	rjmp	.+66     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
			servo1 = eeprom_read_byte((uint8_t*)0x0C);
 55c:	8c e0       	ldi	r24, 0x0C	; 12
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 564:	c8 2f       	mov	r28, r24
 566:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo1>
			servo2 = eeprom_read_byte((uint8_t*)0x0D);
 56a:	8d e0       	ldi	r24, 0x0D	; 13
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 572:	d8 2f       	mov	r29, r24
 574:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo2>
			servo3 = eeprom_read_byte((uint8_t*)0x0E);
 578:	8e e0       	ldi	r24, 0x0E	; 14
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 580:	18 2f       	mov	r17, r24
 582:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <servo3>
			servo4 = eeprom_read_byte((uint8_t*)0x0F);
 586:	8f e0       	ldi	r24, 0x0F	; 15
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 88 07 	call	0xf10	; 0xf10 <eeprom_read_byte>
 58e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			conf_servos(servo1, servo2, servo3, servo4);
 592:	28 2f       	mov	r18, r24
 594:	41 2f       	mov	r20, r17
 596:	6d 2f       	mov	r22, r29
 598:	8c 2f       	mov	r24, r28
 59a:	0e 94 76 01 	call	0x2ec	; 0x2ec <conf_servos>
		}//ESPERAR 4 SEGUNDOS ANTES DE OTRA ACCIÓN
	}
	else{
		
	}
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	1f 91       	pop	r17
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__vector_21>:

//--->Vector de interrupción ADC
ISR(ADC_vect){
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	8f 93       	push	r24
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//LIMPIA LA BANDERA
 5d6:	ea e7       	ldi	r30, 0x7A	; 122
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	80 61       	ori	r24, 0x10	; 16
 5de:	80 83       	st	Z, r24
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	8f 91       	pop	r24
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <map2>:
 *  Author: yemo0
 */ 

#include "PWM0.h"

float map2(float x, float in_min, float in_max, float out_min, float out_max){
 5f0:	4f 92       	push	r4
 5f2:	5f 92       	push	r5
 5f4:	6f 92       	push	r6
 5f6:	7f 92       	push	r7
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	28 97       	sbiw	r28, 0x08	; 8
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	de bf       	out	0x3e, r29	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	29 01       	movw	r4, r18
 61e:	3a 01       	movw	r6, r20
 620:	ed 82       	std	Y+5, r14	; 0x05
 622:	fe 82       	std	Y+6, r15	; 0x06
 624:	0f 83       	std	Y+7, r16	; 0x07
 626:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 628:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 62c:	69 83       	std	Y+1, r22	; 0x01
 62e:	7a 83       	std	Y+2, r23	; 0x02
 630:	8b 83       	std	Y+3, r24	; 0x03
 632:	9c 83       	std	Y+4, r25	; 0x04
 634:	a6 01       	movw	r20, r12
 636:	95 01       	movw	r18, r10
 638:	69 8d       	ldd	r22, Y+25	; 0x19
 63a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 63c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 63e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 640:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	69 81       	ldd	r22, Y+1	; 0x01
 64a:	7a 81       	ldd	r23, Y+2	; 0x02
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	9c 81       	ldd	r25, Y+4	; 0x04
 650:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 654:	69 83       	std	Y+1, r22	; 0x01
 656:	7a 83       	std	Y+2, r23	; 0x02
 658:	8b 83       	std	Y+3, r24	; 0x03
 65a:	9c 83       	std	Y+4, r25	; 0x04
 65c:	a3 01       	movw	r20, r6
 65e:	92 01       	movw	r18, r4
 660:	c8 01       	movw	r24, r16
 662:	b7 01       	movw	r22, r14
 664:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 668:	9b 01       	movw	r18, r22
 66a:	ac 01       	movw	r20, r24
 66c:	69 81       	ldd	r22, Y+1	; 0x01
 66e:	7a 81       	ldd	r23, Y+2	; 0x02
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	9c 81       	ldd	r25, Y+4	; 0x04
 674:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divsf3>
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	c6 01       	movw	r24, r12
 67e:	b5 01       	movw	r22, r10
 680:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3>
}
 684:	28 96       	adiw	r28, 0x08	; 8
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	ff 90       	pop	r15
 69a:	ef 90       	pop	r14
 69c:	df 90       	pop	r13
 69e:	cf 90       	pop	r12
 6a0:	bf 90       	pop	r11
 6a2:	af 90       	pop	r10
 6a4:	7f 90       	pop	r7
 6a6:	6f 90       	pop	r6
 6a8:	5f 90       	pop	r5
 6aa:	4f 90       	pop	r4
 6ac:	08 95       	ret

000006ae <initPWM0FastA>:

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Definimos que el pin PD6 es una saldia (OC0A)  - NO INVERTIDA
	DDRD |= (1<<DDD6);
 6ae:	9a b1       	in	r25, 0x0a	; 10
 6b0:	90 64       	ori	r25, 0x40	; 64
 6b2:	9a b9       	out	0x0a, r25	; 10
	
	//Paso1: Configurar TCCR0A y TCCR0B en 0
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if(inverted){
 6b4:	88 23       	and	r24, r24
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <initPWM0FastA+0x12>
		//Configurando OC0A como INVERTIDO
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 6b8:	84 b5       	in	r24, 0x24	; 36
 6ba:	80 6c       	ori	r24, 0xC0	; 192
 6bc:	84 bd       	out	0x24, r24	; 36
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <initPWM0FastA+0x18>
		}else{
		//Configurando OC0A como NO INVERTIDO
		TCCR0A |= (1<<COM0A1);
 6c0:	84 b5       	in	r24, 0x24	; 36
 6c2:	80 68       	ori	r24, 0x80	; 128
 6c4:	84 bd       	out	0x24, r24	; 36
	}
	
	//Definimos PWM modo FAST TOP = 0xFF (MAX) --- Es igual para ambos TCCR0A y TCCR0B
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 6c6:	84 b5       	in	r24, 0x24	; 36
 6c8:	83 60       	ori	r24, 0x03	; 3
 6ca:	84 bd       	out	0x24, r24	; 36
	
	//Seleccionamos el Prescaler de 1024
	TCCR0B |= (1<<CS02)|(1<<CS00);
 6cc:	85 b5       	in	r24, 0x25	; 37
 6ce:	85 60       	ori	r24, 0x05	; 5
 6d0:	85 bd       	out	0x25, r24	; 37
 6d2:	08 95       	ret

000006d4 <updateDutyCycleA>:
}

void updateDutyCycleA(uint8_t duty){
 6d4:	af 92       	push	r10
 6d6:	bf 92       	push	r11
 6d8:	cf 92       	push	r12
 6da:	df 92       	push	r13
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
	OCR0A = map2(duty,0,255,6,36);
 6e4:	68 2f       	mov	r22, r24
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 6f0:	22 e4       	ldi	r18, 0x42	; 66
 6f2:	2f 93       	push	r18
 6f4:	20 e1       	ldi	r18, 0x10	; 16
 6f6:	2f 93       	push	r18
 6f8:	1f 92       	push	r1
 6fa:	1f 92       	push	r1
 6fc:	0f 2e       	mov	r0, r31
 6fe:	a1 2c       	mov	r10, r1
 700:	b1 2c       	mov	r11, r1
 702:	f0 ec       	ldi	r31, 0xC0	; 192
 704:	cf 2e       	mov	r12, r31
 706:	f0 e4       	ldi	r31, 0x40	; 64
 708:	df 2e       	mov	r13, r31
 70a:	f0 2d       	mov	r31, r0
 70c:	e1 2c       	mov	r14, r1
 70e:	f1 2c       	mov	r15, r1
 710:	0f e7       	ldi	r16, 0x7F	; 127
 712:	13 e4       	ldi	r17, 0x43	; 67
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	a9 01       	movw	r20, r18
 71a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <map2>
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixunssfsi>
 72a:	67 bd       	out	0x27, r22	; 39
}
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	ff 90       	pop	r15
 732:	ef 90       	pop	r14
 734:	df 90       	pop	r13
 736:	cf 90       	pop	r12
 738:	bf 90       	pop	r11
 73a:	af 90       	pop	r10
 73c:	08 95       	ret

0000073e <map>:
 *  Author: Guillermo Schwartz
 */ 

#include "PWM1.h"

float map(float x, float in_min, float in_max, float out_min, float out_max){
 73e:	4f 92       	push	r4
 740:	5f 92       	push	r5
 742:	6f 92       	push	r6
 744:	7f 92       	push	r7
 746:	af 92       	push	r10
 748:	bf 92       	push	r11
 74a:	cf 92       	push	r12
 74c:	df 92       	push	r13
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	28 97       	sbiw	r28, 0x08	; 8
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	f8 94       	cli
 764:	de bf       	out	0x3e, r29	; 62
 766:	0f be       	out	0x3f, r0	; 63
 768:	cd bf       	out	0x3d, r28	; 61
 76a:	29 01       	movw	r4, r18
 76c:	3a 01       	movw	r6, r20
 76e:	ed 82       	std	Y+5, r14	; 0x05
 770:	fe 82       	std	Y+6, r15	; 0x06
 772:	0f 83       	std	Y+7, r16	; 0x07
 774:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 776:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 77a:	69 83       	std	Y+1, r22	; 0x01
 77c:	7a 83       	std	Y+2, r23	; 0x02
 77e:	8b 83       	std	Y+3, r24	; 0x03
 780:	9c 83       	std	Y+4, r25	; 0x04
 782:	a6 01       	movw	r20, r12
 784:	95 01       	movw	r18, r10
 786:	69 8d       	ldd	r22, Y+25	; 0x19
 788:	7a 8d       	ldd	r23, Y+26	; 0x1a
 78a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 78c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 78e:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 792:	9b 01       	movw	r18, r22
 794:	ac 01       	movw	r20, r24
 796:	69 81       	ldd	r22, Y+1	; 0x01
 798:	7a 81       	ldd	r23, Y+2	; 0x02
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	9c 81       	ldd	r25, Y+4	; 0x04
 79e:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 7a2:	69 83       	std	Y+1, r22	; 0x01
 7a4:	7a 83       	std	Y+2, r23	; 0x02
 7a6:	8b 83       	std	Y+3, r24	; 0x03
 7a8:	9c 83       	std	Y+4, r25	; 0x04
 7aa:	a3 01       	movw	r20, r6
 7ac:	92 01       	movw	r18, r4
 7ae:	c8 01       	movw	r24, r16
 7b0:	b7 01       	movw	r22, r14
 7b2:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 7b6:	9b 01       	movw	r18, r22
 7b8:	ac 01       	movw	r20, r24
 7ba:	69 81       	ldd	r22, Y+1	; 0x01
 7bc:	7a 81       	ldd	r23, Y+2	; 0x02
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	9c 81       	ldd	r25, Y+4	; 0x04
 7c2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divsf3>
 7c6:	9b 01       	movw	r18, r22
 7c8:	ac 01       	movw	r20, r24
 7ca:	c6 01       	movw	r24, r12
 7cc:	b5 01       	movw	r22, r10
 7ce:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3>
}
 7d2:	28 96       	adiw	r28, 0x08	; 8
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	af 90       	pop	r10
 7f2:	7f 90       	pop	r7
 7f4:	6f 90       	pop	r6
 7f6:	5f 90       	pop	r5
 7f8:	4f 90       	pop	r4
 7fa:	08 95       	ret

000007fc <initPWM1A>:

void initPWM1A(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB1); //PB1 COMO SALIDA
 7fc:	94 b1       	in	r25, 0x04	; 4
 7fe:	92 60       	ori	r25, 0x02	; 2
 800:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 802:	e0 e8       	ldi	r30, 0x80	; 128
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	90 81       	ld	r25, Z
 808:	92 60       	ori	r25, 0x02	; 2
 80a:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 80c:	e1 e8       	ldi	r30, 0x81	; 129
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	90 81       	ld	r25, Z
 812:	98 61       	ori	r25, 0x18	; 24
 814:	90 83       	st	Z, r25
	ICR1 = top;
 816:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 81a:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 81e:	88 23       	and	r24, r24
 820:	31 f0       	breq	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		TCCR1A |= (1 << COM1A1)|(1 << COM1A0);//PWM INVERTIDO
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	80 6c       	ori	r24, 0xC0	; 192
 82a:	80 83       	st	Z, r24
 82c:	05 c0       	rjmp	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		} else	 {
		TCCR1A |= (1 << COM1A1);//PWM NO INVERTIDO
 82e:	e0 e8       	ldi	r30, 0x80	; 128
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	80 68       	ori	r24, 0x80	; 128
 836:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 838:	68 30       	cpi	r22, 0x08	; 8
 83a:	71 05       	cpc	r23, r1
 83c:	31 f4       	brne	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		TCCR1B |= (1 << CS11);
 83e:	e1 e8       	ldi	r30, 0x81	; 129
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	82 60       	ori	r24, 0x02	; 2
 846:	80 83       	st	Z, r24
 848:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 84a:	e1 e8       	ldi	r30, 0x81	; 129
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	84 60       	ori	r24, 0x04	; 4
 852:	80 83       	st	Z, r24
 854:	08 95       	ret

00000856 <initPWM1B>:
	}
}

void initPWM1B(uint8_t inverted, uint16_t prescaler, uint16_t top){
	DDRB |= (1 << DDB2); //PB2 COMO SALIDA
 856:	94 b1       	in	r25, 0x04	; 4
 858:	94 60       	ori	r25, 0x04	; 4
 85a:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1 << WGM11);				 //PWM MODO FAST ICR1
 85c:	e0 e8       	ldi	r30, 0x80	; 128
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	90 81       	ld	r25, Z
 862:	92 60       	ori	r25, 0x02	; 2
 864:	90 83       	st	Z, r25
	TCCR1B |= (1 << WGM13)|(1 << WGM12); //PWM MODO FAST ICR1
 866:	e1 e8       	ldi	r30, 0x81	; 129
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	90 81       	ld	r25, Z
 86c:	98 61       	ori	r25, 0x18	; 24
 86e:	90 83       	st	Z, r25
	ICR1 = top;
 870:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 874:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	if (inverted) {
 878:	88 23       	and	r24, r24
 87a:	31 f0       	breq	.+12     	; 0x888 <initPWM1B+0x32>
		TCCR1A |= (1 << COM1B1)|(1 << COM1B0);//PWM INVERTIDO
 87c:	e0 e8       	ldi	r30, 0x80	; 128
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	80 63       	ori	r24, 0x30	; 48
 884:	80 83       	st	Z, r24
 886:	05 c0       	rjmp	.+10     	; 0x892 <initPWM1B+0x3c>
		} else	 {
		TCCR1A |= (1 << COM1B1);//PWM NO INVERTIDO
 888:	e0 e8       	ldi	r30, 0x80	; 128
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	80 62       	ori	r24, 0x20	; 32
 890:	80 83       	st	Z, r24
	}

	if (prescaler == 8) {
 892:	68 30       	cpi	r22, 0x08	; 8
 894:	71 05       	cpc	r23, r1
 896:	31 f4       	brne	.+12     	; 0x8a4 <initPWM1B+0x4e>
		TCCR1B |= (1 << CS11);
 898:	e1 e8       	ldi	r30, 0x81	; 129
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	82 60       	ori	r24, 0x02	; 2
 8a0:	80 83       	st	Z, r24
 8a2:	08 95       	ret
		} else {
		TCCR1B |= (1 << CS12);
 8a4:	e1 e8       	ldi	r30, 0x81	; 129
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	84 60       	ori	r24, 0x04	; 4
 8ac:	80 83       	st	Z, r24
 8ae:	08 95       	ret

000008b0 <updateDutyCA1>:
	}
}


void updateDutyCA1(uint8_t duty){//900=0° 2800=90° 48000=180°
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
	OCR1A = map(duty,0,255,900,4800);
 8c0:	68 2f       	mov	r22, r24
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 8cc:	25 e4       	ldi	r18, 0x45	; 69
 8ce:	2f 93       	push	r18
 8d0:	26 e9       	ldi	r18, 0x96	; 150
 8d2:	2f 93       	push	r18
 8d4:	1f 92       	push	r1
 8d6:	1f 92       	push	r1
 8d8:	0f 2e       	mov	r0, r31
 8da:	a1 2c       	mov	r10, r1
 8dc:	b1 2c       	mov	r11, r1
 8de:	f1 e6       	ldi	r31, 0x61	; 97
 8e0:	cf 2e       	mov	r12, r31
 8e2:	f4 e4       	ldi	r31, 0x44	; 68
 8e4:	df 2e       	mov	r13, r31
 8e6:	f0 2d       	mov	r31, r0
 8e8:	e1 2c       	mov	r14, r1
 8ea:	f1 2c       	mov	r15, r1
 8ec:	0f e7       	ldi	r16, 0x7F	; 127
 8ee:	13 e4       	ldi	r17, 0x43	; 67
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	a9 01       	movw	r20, r18
 8f6:	0e 94 9f 03 	call	0x73e	; 0x73e <map>
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixunssfsi>
 906:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 90a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	bf 90       	pop	r11
 91c:	af 90       	pop	r10
 91e:	08 95       	ret

00000920 <updateDutyCB1>:

void updateDutyCB1(uint8_t duty){
 920:	af 92       	push	r10
 922:	bf 92       	push	r11
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
	OCR1B = map(duty,0,255,900,4800);
 930:	68 2f       	mov	r22, r24
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 93c:	25 e4       	ldi	r18, 0x45	; 69
 93e:	2f 93       	push	r18
 940:	26 e9       	ldi	r18, 0x96	; 150
 942:	2f 93       	push	r18
 944:	1f 92       	push	r1
 946:	1f 92       	push	r1
 948:	0f 2e       	mov	r0, r31
 94a:	a1 2c       	mov	r10, r1
 94c:	b1 2c       	mov	r11, r1
 94e:	f1 e6       	ldi	r31, 0x61	; 97
 950:	cf 2e       	mov	r12, r31
 952:	f4 e4       	ldi	r31, 0x44	; 68
 954:	df 2e       	mov	r13, r31
 956:	f0 2d       	mov	r31, r0
 958:	e1 2c       	mov	r14, r1
 95a:	f1 2c       	mov	r15, r1
 95c:	0f e7       	ldi	r16, 0x7F	; 127
 95e:	13 e4       	ldi	r17, 0x43	; 67
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	a9 01       	movw	r20, r18
 966:	0e 94 9f 03 	call	0x73e	; 0x73e <map>
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixunssfsi>
 976:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 97a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	cf 90       	pop	r12
 98a:	bf 90       	pop	r11
 98c:	af 90       	pop	r10
 98e:	08 95       	ret

00000990 <map1>:
 *  Author: yemo0
 */ 

#include "PWM2.h"

float map1(float x, float in_min, float in_max, float out_min, float out_max){
 990:	4f 92       	push	r4
 992:	5f 92       	push	r5
 994:	6f 92       	push	r6
 996:	7f 92       	push	r7
 998:	af 92       	push	r10
 99a:	bf 92       	push	r11
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	28 97       	sbiw	r28, 0x08	; 8
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	29 01       	movw	r4, r18
 9be:	3a 01       	movw	r6, r20
 9c0:	ed 82       	std	Y+5, r14	; 0x05
 9c2:	fe 82       	std	Y+6, r15	; 0x06
 9c4:	0f 83       	std	Y+7, r16	; 0x07
 9c6:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 9c8:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 9cc:	69 83       	std	Y+1, r22	; 0x01
 9ce:	7a 83       	std	Y+2, r23	; 0x02
 9d0:	8b 83       	std	Y+3, r24	; 0x03
 9d2:	9c 83       	std	Y+4, r25	; 0x04
 9d4:	a6 01       	movw	r20, r12
 9d6:	95 01       	movw	r18, r10
 9d8:	69 8d       	ldd	r22, Y+25	; 0x19
 9da:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 9de:	9c 8d       	ldd	r25, Y+28	; 0x1c
 9e0:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 9e4:	9b 01       	movw	r18, r22
 9e6:	ac 01       	movw	r20, r24
 9e8:	69 81       	ldd	r22, Y+1	; 0x01
 9ea:	7a 81       	ldd	r23, Y+2	; 0x02
 9ec:	8b 81       	ldd	r24, Y+3	; 0x03
 9ee:	9c 81       	ldd	r25, Y+4	; 0x04
 9f0:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 9f4:	69 83       	std	Y+1, r22	; 0x01
 9f6:	7a 83       	std	Y+2, r23	; 0x02
 9f8:	8b 83       	std	Y+3, r24	; 0x03
 9fa:	9c 83       	std	Y+4, r25	; 0x04
 9fc:	a3 01       	movw	r20, r6
 9fe:	92 01       	movw	r18, r4
 a00:	c8 01       	movw	r24, r16
 a02:	b7 01       	movw	r22, r14
 a04:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
 a08:	9b 01       	movw	r18, r22
 a0a:	ac 01       	movw	r20, r24
 a0c:	69 81       	ldd	r22, Y+1	; 0x01
 a0e:	7a 81       	ldd	r23, Y+2	; 0x02
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	9c 81       	ldd	r25, Y+4	; 0x04
 a14:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divsf3>
 a18:	9b 01       	movw	r18, r22
 a1a:	ac 01       	movw	r20, r24
 a1c:	c6 01       	movw	r24, r12
 a1e:	b5 01       	movw	r22, r10
 a20:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3>
}
 a24:	28 96       	adiw	r28, 0x08	; 8
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	f8 94       	cli
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	cd bf       	out	0x3d, r28	; 61
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	ff 90       	pop	r15
 a3a:	ef 90       	pop	r14
 a3c:	df 90       	pop	r13
 a3e:	cf 90       	pop	r12
 a40:	bf 90       	pop	r11
 a42:	af 90       	pop	r10
 a44:	7f 90       	pop	r7
 a46:	6f 90       	pop	r6
 a48:	5f 90       	pop	r5
 a4a:	4f 90       	pop	r4
 a4c:	08 95       	ret

00000a4e <initPWM2A>:

void initPWM2A(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1 << DDB3); //PB3 COMO SALIDA
 a4e:	94 b1       	in	r25, 0x04	; 4
 a50:	98 60       	ori	r25, 0x08	; 8
 a52:	94 b9       	out	0x04, r25	; 4
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 a54:	e0 eb       	ldi	r30, 0xB0	; 176
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	90 81       	ld	r25, Z
 a5a:	93 60       	ori	r25, 0x03	; 3
 a5c:	90 83       	st	Z, r25
	
	if (inverted) {
 a5e:	88 23       	and	r24, r24
 a60:	21 f0       	breq	.+8      	; 0xa6a <initPWM2A+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
 a62:	80 81       	ld	r24, Z
 a64:	80 6c       	ori	r24, 0xC0	; 192
 a66:	80 83       	st	Z, r24
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <initPWM2A+0x26>
		} else	 {
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
 a6a:	e0 eb       	ldi	r30, 0xB0	; 176
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	80 68       	ori	r24, 0x80	; 128
 a72:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 a74:	61 15       	cp	r22, r1
 a76:	74 40       	sbci	r23, 0x04	; 4
 a78:	31 f4       	brne	.+12     	; 0xa86 <initPWM2A+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 a7a:	e1 eb       	ldi	r30, 0xB1	; 177
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	80 81       	ld	r24, Z
 a80:	87 60       	ori	r24, 0x07	; 7
 a82:	80 83       	st	Z, r24
 a84:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 a86:	e1 eb       	ldi	r30, 0xB1	; 177
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	81 60       	ori	r24, 0x01	; 1
 a8e:	80 83       	st	Z, r24
 a90:	08 95       	ret

00000a92 <updateDutyCA2>:
	}
}



void updateDutyCA2(uint8_t duty){
 a92:	af 92       	push	r10
 a94:	bf 92       	push	r11
 a96:	cf 92       	push	r12
 a98:	df 92       	push	r13
 a9a:	ef 92       	push	r14
 a9c:	ff 92       	push	r15
 a9e:	0f 93       	push	r16
 aa0:	1f 93       	push	r17
	OCR2A = map1(duty,0,255,6,36);
 aa2:	68 2f       	mov	r22, r24
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 aae:	22 e4       	ldi	r18, 0x42	; 66
 ab0:	2f 93       	push	r18
 ab2:	20 e1       	ldi	r18, 0x10	; 16
 ab4:	2f 93       	push	r18
 ab6:	1f 92       	push	r1
 ab8:	1f 92       	push	r1
 aba:	0f 2e       	mov	r0, r31
 abc:	a1 2c       	mov	r10, r1
 abe:	b1 2c       	mov	r11, r1
 ac0:	f0 ec       	ldi	r31, 0xC0	; 192
 ac2:	cf 2e       	mov	r12, r31
 ac4:	f0 e4       	ldi	r31, 0x40	; 64
 ac6:	df 2e       	mov	r13, r31
 ac8:	f0 2d       	mov	r31, r0
 aca:	e1 2c       	mov	r14, r1
 acc:	f1 2c       	mov	r15, r1
 ace:	0f e7       	ldi	r16, 0x7F	; 127
 ad0:	13 e4       	ldi	r17, 0x43	; 67
 ad2:	20 e0       	ldi	r18, 0x00	; 0
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	a9 01       	movw	r20, r18
 ad8:	0e 94 c8 04 	call	0x990	; 0x990 <map1>
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	0f 90       	pop	r0
 ae2:	0f 90       	pop	r0
 ae4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixunssfsi>
 ae8:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	ff 90       	pop	r15
 af2:	ef 90       	pop	r14
 af4:	df 90       	pop	r13
 af6:	cf 90       	pop	r12
 af8:	bf 90       	pop	r11
 afa:	af 90       	pop	r10
 afc:	08 95       	ret

00000afe <__subsf3>:
 afe:	50 58       	subi	r21, 0x80	; 128

00000b00 <__addsf3>:
 b00:	bb 27       	eor	r27, r27
 b02:	aa 27       	eor	r26, r26
 b04:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3x>
 b08:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 b0c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 b10:	38 f0       	brcs	.+14     	; 0xb20 <__addsf3+0x20>
 b12:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 b16:	20 f0       	brcs	.+8      	; 0xb20 <__addsf3+0x20>
 b18:	39 f4       	brne	.+14     	; 0xb28 <__addsf3+0x28>
 b1a:	9f 3f       	cpi	r25, 0xFF	; 255
 b1c:	19 f4       	brne	.+6      	; 0xb24 <__addsf3+0x24>
 b1e:	26 f4       	brtc	.+8      	; 0xb28 <__addsf3+0x28>
 b20:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 b24:	0e f4       	brtc	.+2      	; 0xb28 <__addsf3+0x28>
 b26:	e0 95       	com	r30
 b28:	e7 fb       	bst	r30, 7
 b2a:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>

00000b2e <__addsf3x>:
 b2e:	e9 2f       	mov	r30, r25
 b30:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 b34:	58 f3       	brcs	.-42     	; 0xb0c <__addsf3+0xc>
 b36:	ba 17       	cp	r27, r26
 b38:	62 07       	cpc	r22, r18
 b3a:	73 07       	cpc	r23, r19
 b3c:	84 07       	cpc	r24, r20
 b3e:	95 07       	cpc	r25, r21
 b40:	20 f0       	brcs	.+8      	; 0xb4a <__addsf3x+0x1c>
 b42:	79 f4       	brne	.+30     	; 0xb62 <__addsf3x+0x34>
 b44:	a6 f5       	brtc	.+104    	; 0xbae <__addsf3x+0x80>
 b46:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 b4a:	0e f4       	brtc	.+2      	; 0xb4e <__addsf3x+0x20>
 b4c:	e0 95       	com	r30
 b4e:	0b 2e       	mov	r0, r27
 b50:	ba 2f       	mov	r27, r26
 b52:	a0 2d       	mov	r26, r0
 b54:	0b 01       	movw	r0, r22
 b56:	b9 01       	movw	r22, r18
 b58:	90 01       	movw	r18, r0
 b5a:	0c 01       	movw	r0, r24
 b5c:	ca 01       	movw	r24, r20
 b5e:	a0 01       	movw	r20, r0
 b60:	11 24       	eor	r1, r1
 b62:	ff 27       	eor	r31, r31
 b64:	59 1b       	sub	r21, r25
 b66:	99 f0       	breq	.+38     	; 0xb8e <__addsf3x+0x60>
 b68:	59 3f       	cpi	r21, 0xF9	; 249
 b6a:	50 f4       	brcc	.+20     	; 0xb80 <__addsf3x+0x52>
 b6c:	50 3e       	cpi	r21, 0xE0	; 224
 b6e:	68 f1       	brcs	.+90     	; 0xbca <__addsf3x+0x9c>
 b70:	1a 16       	cp	r1, r26
 b72:	f0 40       	sbci	r31, 0x00	; 0
 b74:	a2 2f       	mov	r26, r18
 b76:	23 2f       	mov	r18, r19
 b78:	34 2f       	mov	r19, r20
 b7a:	44 27       	eor	r20, r20
 b7c:	58 5f       	subi	r21, 0xF8	; 248
 b7e:	f3 cf       	rjmp	.-26     	; 0xb66 <__addsf3x+0x38>
 b80:	46 95       	lsr	r20
 b82:	37 95       	ror	r19
 b84:	27 95       	ror	r18
 b86:	a7 95       	ror	r26
 b88:	f0 40       	sbci	r31, 0x00	; 0
 b8a:	53 95       	inc	r21
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__addsf3x+0x52>
 b8e:	7e f4       	brtc	.+30     	; 0xbae <__addsf3x+0x80>
 b90:	1f 16       	cp	r1, r31
 b92:	ba 0b       	sbc	r27, r26
 b94:	62 0b       	sbc	r22, r18
 b96:	73 0b       	sbc	r23, r19
 b98:	84 0b       	sbc	r24, r20
 b9a:	ba f0       	brmi	.+46     	; 0xbca <__addsf3x+0x9c>
 b9c:	91 50       	subi	r25, 0x01	; 1
 b9e:	a1 f0       	breq	.+40     	; 0xbc8 <__addsf3x+0x9a>
 ba0:	ff 0f       	add	r31, r31
 ba2:	bb 1f       	adc	r27, r27
 ba4:	66 1f       	adc	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	c2 f7       	brpl	.-16     	; 0xb9c <__addsf3x+0x6e>
 bac:	0e c0       	rjmp	.+28     	; 0xbca <__addsf3x+0x9c>
 bae:	ba 0f       	add	r27, r26
 bb0:	62 1f       	adc	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	48 f4       	brcc	.+18     	; 0xbca <__addsf3x+0x9c>
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b7 95       	ror	r27
 bc0:	f7 95       	ror	r31
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	08 f0       	brcs	.+2      	; 0xbc8 <__addsf3x+0x9a>
 bc6:	b0 cf       	rjmp	.-160    	; 0xb28 <__addsf3+0x28>
 bc8:	93 95       	inc	r25
 bca:	88 0f       	add	r24, r24
 bcc:	08 f0       	brcs	.+2      	; 0xbd0 <__addsf3x+0xa2>
 bce:	99 27       	eor	r25, r25
 bd0:	ee 0f       	add	r30, r30
 bd2:	97 95       	ror	r25
 bd4:	87 95       	ror	r24
 bd6:	08 95       	ret

00000bd8 <__divsf3>:
 bd8:	0e 94 00 06 	call	0xc00	; 0xc00 <__divsf3x>
 bdc:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 be0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 be4:	58 f0       	brcs	.+22     	; 0xbfc <__divsf3+0x24>
 be6:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 bea:	40 f0       	brcs	.+16     	; 0xbfc <__divsf3+0x24>
 bec:	29 f4       	brne	.+10     	; 0xbf8 <__divsf3+0x20>
 bee:	5f 3f       	cpi	r21, 0xFF	; 255
 bf0:	29 f0       	breq	.+10     	; 0xbfc <__divsf3+0x24>
 bf2:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 bf6:	51 11       	cpse	r21, r1
 bf8:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 bfc:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>

00000c00 <__divsf3x>:
 c00:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 c04:	68 f3       	brcs	.-38     	; 0xbe0 <__divsf3+0x8>

00000c06 <__divsf3_pse>:
 c06:	99 23       	and	r25, r25
 c08:	b1 f3       	breq	.-20     	; 0xbf6 <__divsf3+0x1e>
 c0a:	55 23       	and	r21, r21
 c0c:	91 f3       	breq	.-28     	; 0xbf2 <__divsf3+0x1a>
 c0e:	95 1b       	sub	r25, r21
 c10:	55 0b       	sbc	r21, r21
 c12:	bb 27       	eor	r27, r27
 c14:	aa 27       	eor	r26, r26
 c16:	62 17       	cp	r22, r18
 c18:	73 07       	cpc	r23, r19
 c1a:	84 07       	cpc	r24, r20
 c1c:	38 f0       	brcs	.+14     	; 0xc2c <__divsf3_pse+0x26>
 c1e:	9f 5f       	subi	r25, 0xFF	; 255
 c20:	5f 4f       	sbci	r21, 0xFF	; 255
 c22:	22 0f       	add	r18, r18
 c24:	33 1f       	adc	r19, r19
 c26:	44 1f       	adc	r20, r20
 c28:	aa 1f       	adc	r26, r26
 c2a:	a9 f3       	breq	.-22     	; 0xc16 <__divsf3_pse+0x10>
 c2c:	35 d0       	rcall	.+106    	; 0xc98 <__divsf3_pse+0x92>
 c2e:	0e 2e       	mov	r0, r30
 c30:	3a f0       	brmi	.+14     	; 0xc40 <__divsf3_pse+0x3a>
 c32:	e0 e8       	ldi	r30, 0x80	; 128
 c34:	32 d0       	rcall	.+100    	; 0xc9a <__divsf3_pse+0x94>
 c36:	91 50       	subi	r25, 0x01	; 1
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	e6 95       	lsr	r30
 c3c:	00 1c       	adc	r0, r0
 c3e:	ca f7       	brpl	.-14     	; 0xc32 <__divsf3_pse+0x2c>
 c40:	2b d0       	rcall	.+86     	; 0xc98 <__divsf3_pse+0x92>
 c42:	fe 2f       	mov	r31, r30
 c44:	29 d0       	rcall	.+82     	; 0xc98 <__divsf3_pse+0x92>
 c46:	66 0f       	add	r22, r22
 c48:	77 1f       	adc	r23, r23
 c4a:	88 1f       	adc	r24, r24
 c4c:	bb 1f       	adc	r27, r27
 c4e:	26 17       	cp	r18, r22
 c50:	37 07       	cpc	r19, r23
 c52:	48 07       	cpc	r20, r24
 c54:	ab 07       	cpc	r26, r27
 c56:	b0 e8       	ldi	r27, 0x80	; 128
 c58:	09 f0       	breq	.+2      	; 0xc5c <__divsf3_pse+0x56>
 c5a:	bb 0b       	sbc	r27, r27
 c5c:	80 2d       	mov	r24, r0
 c5e:	bf 01       	movw	r22, r30
 c60:	ff 27       	eor	r31, r31
 c62:	93 58       	subi	r25, 0x83	; 131
 c64:	5f 4f       	sbci	r21, 0xFF	; 255
 c66:	3a f0       	brmi	.+14     	; 0xc76 <__divsf3_pse+0x70>
 c68:	9e 3f       	cpi	r25, 0xFE	; 254
 c6a:	51 05       	cpc	r21, r1
 c6c:	78 f0       	brcs	.+30     	; 0xc8c <__divsf3_pse+0x86>
 c6e:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 c72:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	e4 f3       	brlt	.-8      	; 0xc72 <__divsf3_pse+0x6c>
 c7a:	98 3e       	cpi	r25, 0xE8	; 232
 c7c:	d4 f3       	brlt	.-12     	; 0xc72 <__divsf3_pse+0x6c>
 c7e:	86 95       	lsr	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f7 95       	ror	r31
 c88:	9f 5f       	subi	r25, 0xFF	; 255
 c8a:	c9 f7       	brne	.-14     	; 0xc7e <__divsf3_pse+0x78>
 c8c:	88 0f       	add	r24, r24
 c8e:	91 1d       	adc	r25, r1
 c90:	96 95       	lsr	r25
 c92:	87 95       	ror	r24
 c94:	97 f9       	bld	r25, 7
 c96:	08 95       	ret
 c98:	e1 e0       	ldi	r30, 0x01	; 1
 c9a:	66 0f       	add	r22, r22
 c9c:	77 1f       	adc	r23, r23
 c9e:	88 1f       	adc	r24, r24
 ca0:	bb 1f       	adc	r27, r27
 ca2:	62 17       	cp	r22, r18
 ca4:	73 07       	cpc	r23, r19
 ca6:	84 07       	cpc	r24, r20
 ca8:	ba 07       	cpc	r27, r26
 caa:	20 f0       	brcs	.+8      	; 0xcb4 <__divsf3_pse+0xae>
 cac:	62 1b       	sub	r22, r18
 cae:	73 0b       	sbc	r23, r19
 cb0:	84 0b       	sbc	r24, r20
 cb2:	ba 0b       	sbc	r27, r26
 cb4:	ee 1f       	adc	r30, r30
 cb6:	88 f7       	brcc	.-30     	; 0xc9a <__divsf3_pse+0x94>
 cb8:	e0 95       	com	r30
 cba:	08 95       	ret

00000cbc <__fixunssfsi>:
 cbc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_splitA>
 cc0:	88 f0       	brcs	.+34     	; 0xce4 <__fixunssfsi+0x28>
 cc2:	9f 57       	subi	r25, 0x7F	; 127
 cc4:	98 f0       	brcs	.+38     	; 0xcec <__fixunssfsi+0x30>
 cc6:	b9 2f       	mov	r27, r25
 cc8:	99 27       	eor	r25, r25
 cca:	b7 51       	subi	r27, 0x17	; 23
 ccc:	b0 f0       	brcs	.+44     	; 0xcfa <__fixunssfsi+0x3e>
 cce:	e1 f0       	breq	.+56     	; 0xd08 <__fixunssfsi+0x4c>
 cd0:	66 0f       	add	r22, r22
 cd2:	77 1f       	adc	r23, r23
 cd4:	88 1f       	adc	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	1a f0       	brmi	.+6      	; 0xce0 <__fixunssfsi+0x24>
 cda:	ba 95       	dec	r27
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__fixunssfsi+0x14>
 cde:	14 c0       	rjmp	.+40     	; 0xd08 <__fixunssfsi+0x4c>
 ce0:	b1 30       	cpi	r27, 0x01	; 1
 ce2:	91 f0       	breq	.+36     	; 0xd08 <__fixunssfsi+0x4c>
 ce4:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_zero>
 ce8:	b1 e0       	ldi	r27, 0x01	; 1
 cea:	08 95       	ret
 cec:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 cf0:	67 2f       	mov	r22, r23
 cf2:	78 2f       	mov	r23, r24
 cf4:	88 27       	eor	r24, r24
 cf6:	b8 5f       	subi	r27, 0xF8	; 248
 cf8:	39 f0       	breq	.+14     	; 0xd08 <__fixunssfsi+0x4c>
 cfa:	b9 3f       	cpi	r27, 0xF9	; 249
 cfc:	cc f3       	brlt	.-14     	; 0xcf0 <__fixunssfsi+0x34>
 cfe:	86 95       	lsr	r24
 d00:	77 95       	ror	r23
 d02:	67 95       	ror	r22
 d04:	b3 95       	inc	r27
 d06:	d9 f7       	brne	.-10     	; 0xcfe <__fixunssfsi+0x42>
 d08:	3e f4       	brtc	.+14     	; 0xd18 <__fixunssfsi+0x5c>
 d0a:	90 95       	com	r25
 d0c:	80 95       	com	r24
 d0e:	70 95       	com	r23
 d10:	61 95       	neg	r22
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	8f 4f       	sbci	r24, 0xFF	; 255
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	08 95       	ret

00000d1a <__floatunsisf>:
 d1a:	e8 94       	clt
 d1c:	09 c0       	rjmp	.+18     	; 0xd30 <__floatsisf+0x12>

00000d1e <__floatsisf>:
 d1e:	97 fb       	bst	r25, 7
 d20:	3e f4       	brtc	.+14     	; 0xd30 <__floatsisf+0x12>
 d22:	90 95       	com	r25
 d24:	80 95       	com	r24
 d26:	70 95       	com	r23
 d28:	61 95       	neg	r22
 d2a:	7f 4f       	sbci	r23, 0xFF	; 255
 d2c:	8f 4f       	sbci	r24, 0xFF	; 255
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	99 23       	and	r25, r25
 d32:	a9 f0       	breq	.+42     	; 0xd5e <__floatsisf+0x40>
 d34:	f9 2f       	mov	r31, r25
 d36:	96 e9       	ldi	r25, 0x96	; 150
 d38:	bb 27       	eor	r27, r27
 d3a:	93 95       	inc	r25
 d3c:	f6 95       	lsr	r31
 d3e:	87 95       	ror	r24
 d40:	77 95       	ror	r23
 d42:	67 95       	ror	r22
 d44:	b7 95       	ror	r27
 d46:	f1 11       	cpse	r31, r1
 d48:	f8 cf       	rjmp	.-16     	; 0xd3a <__floatsisf+0x1c>
 d4a:	fa f4       	brpl	.+62     	; 0xd8a <__floatsisf+0x6c>
 d4c:	bb 0f       	add	r27, r27
 d4e:	11 f4       	brne	.+4      	; 0xd54 <__floatsisf+0x36>
 d50:	60 ff       	sbrs	r22, 0
 d52:	1b c0       	rjmp	.+54     	; 0xd8a <__floatsisf+0x6c>
 d54:	6f 5f       	subi	r22, 0xFF	; 255
 d56:	7f 4f       	sbci	r23, 0xFF	; 255
 d58:	8f 4f       	sbci	r24, 0xFF	; 255
 d5a:	9f 4f       	sbci	r25, 0xFF	; 255
 d5c:	16 c0       	rjmp	.+44     	; 0xd8a <__floatsisf+0x6c>
 d5e:	88 23       	and	r24, r24
 d60:	11 f0       	breq	.+4      	; 0xd66 <__floatsisf+0x48>
 d62:	96 e9       	ldi	r25, 0x96	; 150
 d64:	11 c0       	rjmp	.+34     	; 0xd88 <__floatsisf+0x6a>
 d66:	77 23       	and	r23, r23
 d68:	21 f0       	breq	.+8      	; 0xd72 <__floatsisf+0x54>
 d6a:	9e e8       	ldi	r25, 0x8E	; 142
 d6c:	87 2f       	mov	r24, r23
 d6e:	76 2f       	mov	r23, r22
 d70:	05 c0       	rjmp	.+10     	; 0xd7c <__floatsisf+0x5e>
 d72:	66 23       	and	r22, r22
 d74:	71 f0       	breq	.+28     	; 0xd92 <__floatsisf+0x74>
 d76:	96 e8       	ldi	r25, 0x86	; 134
 d78:	86 2f       	mov	r24, r22
 d7a:	70 e0       	ldi	r23, 0x00	; 0
 d7c:	60 e0       	ldi	r22, 0x00	; 0
 d7e:	2a f0       	brmi	.+10     	; 0xd8a <__floatsisf+0x6c>
 d80:	9a 95       	dec	r25
 d82:	66 0f       	add	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	88 1f       	adc	r24, r24
 d88:	da f7       	brpl	.-10     	; 0xd80 <__floatsisf+0x62>
 d8a:	88 0f       	add	r24, r24
 d8c:	96 95       	lsr	r25
 d8e:	87 95       	ror	r24
 d90:	97 f9       	bld	r25, 7
 d92:	08 95       	ret

00000d94 <__fp_inf>:
 d94:	97 f9       	bld	r25, 7
 d96:	9f 67       	ori	r25, 0x7F	; 127
 d98:	80 e8       	ldi	r24, 0x80	; 128
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	08 95       	ret

00000da0 <__fp_nan>:
 da0:	9f ef       	ldi	r25, 0xFF	; 255
 da2:	80 ec       	ldi	r24, 0xC0	; 192
 da4:	08 95       	ret

00000da6 <__fp_pscA>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	18 06       	cpc	r1, r24
 db0:	09 06       	cpc	r0, r25
 db2:	08 95       	ret

00000db4 <__fp_pscB>:
 db4:	00 24       	eor	r0, r0
 db6:	0a 94       	dec	r0
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	05 06       	cpc	r0, r21
 dc0:	08 95       	ret

00000dc2 <__fp_round>:
 dc2:	09 2e       	mov	r0, r25
 dc4:	03 94       	inc	r0
 dc6:	00 0c       	add	r0, r0
 dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0xc>
 dca:	88 23       	and	r24, r24
 dcc:	52 f0       	brmi	.+20     	; 0xde2 <__fp_round+0x20>
 dce:	bb 0f       	add	r27, r27
 dd0:	40 f4       	brcc	.+16     	; 0xde2 <__fp_round+0x20>
 dd2:	bf 2b       	or	r27, r31
 dd4:	11 f4       	brne	.+4      	; 0xdda <__fp_round+0x18>
 dd6:	60 ff       	sbrs	r22, 0
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__fp_round+0x20>
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__fp_split3>:
 de4:	57 fd       	sbrc	r21, 7
 de6:	90 58       	subi	r25, 0x80	; 128
 de8:	44 0f       	add	r20, r20
 dea:	55 1f       	adc	r21, r21
 dec:	59 f0       	breq	.+22     	; 0xe04 <__fp_splitA+0x10>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	71 f0       	breq	.+28     	; 0xe0e <__fp_splitA+0x1a>
 df2:	47 95       	ror	r20

00000df4 <__fp_splitA>:
 df4:	88 0f       	add	r24, r24
 df6:	97 fb       	bst	r25, 7
 df8:	99 1f       	adc	r25, r25
 dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_splitA+0x20>
 dfc:	9f 3f       	cpi	r25, 0xFF	; 255
 dfe:	79 f0       	breq	.+30     	; 0xe1e <__fp_splitA+0x2a>
 e00:	87 95       	ror	r24
 e02:	08 95       	ret
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	f2 cf       	rjmp	.-28     	; 0xdf2 <__fp_split3+0xe>
 e0e:	46 95       	lsr	r20
 e10:	f1 df       	rcall	.-30     	; 0xdf4 <__fp_splitA>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__fp_splitA+0x30>
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	f1 cf       	rjmp	.-30     	; 0xe00 <__fp_splitA+0xc>
 e1e:	86 95       	lsr	r24
 e20:	71 05       	cpc	r23, r1
 e22:	61 05       	cpc	r22, r1
 e24:	08 94       	sec
 e26:	08 95       	ret

00000e28 <__fp_zero>:
 e28:	e8 94       	clt

00000e2a <__fp_szero>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	66 27       	eor	r22, r22
 e2e:	77 27       	eor	r23, r23
 e30:	cb 01       	movw	r24, r22
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__mulsf3>:
 e36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3x>
 e3a:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 e3e:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 e42:	38 f0       	brcs	.+14     	; 0xe52 <__mulsf3+0x1c>
 e44:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 e48:	20 f0       	brcs	.+8      	; 0xe52 <__mulsf3+0x1c>
 e4a:	95 23       	and	r25, r21
 e4c:	11 f0       	breq	.+4      	; 0xe52 <__mulsf3+0x1c>
 e4e:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 e52:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 e56:	11 24       	eor	r1, r1
 e58:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>

00000e5c <__mulsf3x>:
 e5c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 e60:	70 f3       	brcs	.-36     	; 0xe3e <__mulsf3+0x8>

00000e62 <__mulsf3_pse>:
 e62:	95 9f       	mul	r25, r21
 e64:	c1 f3       	breq	.-16     	; 0xe56 <__mulsf3+0x20>
 e66:	95 0f       	add	r25, r21
 e68:	50 e0       	ldi	r21, 0x00	; 0
 e6a:	55 1f       	adc	r21, r21
 e6c:	62 9f       	mul	r22, r18
 e6e:	f0 01       	movw	r30, r0
 e70:	72 9f       	mul	r23, r18
 e72:	bb 27       	eor	r27, r27
 e74:	f0 0d       	add	r31, r0
 e76:	b1 1d       	adc	r27, r1
 e78:	63 9f       	mul	r22, r19
 e7a:	aa 27       	eor	r26, r26
 e7c:	f0 0d       	add	r31, r0
 e7e:	b1 1d       	adc	r27, r1
 e80:	aa 1f       	adc	r26, r26
 e82:	64 9f       	mul	r22, r20
 e84:	66 27       	eor	r22, r22
 e86:	b0 0d       	add	r27, r0
 e88:	a1 1d       	adc	r26, r1
 e8a:	66 1f       	adc	r22, r22
 e8c:	82 9f       	mul	r24, r18
 e8e:	22 27       	eor	r18, r18
 e90:	b0 0d       	add	r27, r0
 e92:	a1 1d       	adc	r26, r1
 e94:	62 1f       	adc	r22, r18
 e96:	73 9f       	mul	r23, r19
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	62 1f       	adc	r22, r18
 e9e:	83 9f       	mul	r24, r19
 ea0:	a0 0d       	add	r26, r0
 ea2:	61 1d       	adc	r22, r1
 ea4:	22 1f       	adc	r18, r18
 ea6:	74 9f       	mul	r23, r20
 ea8:	33 27       	eor	r19, r19
 eaa:	a0 0d       	add	r26, r0
 eac:	61 1d       	adc	r22, r1
 eae:	23 1f       	adc	r18, r19
 eb0:	84 9f       	mul	r24, r20
 eb2:	60 0d       	add	r22, r0
 eb4:	21 1d       	adc	r18, r1
 eb6:	82 2f       	mov	r24, r18
 eb8:	76 2f       	mov	r23, r22
 eba:	6a 2f       	mov	r22, r26
 ebc:	11 24       	eor	r1, r1
 ebe:	9f 57       	subi	r25, 0x7F	; 127
 ec0:	50 40       	sbci	r21, 0x00	; 0
 ec2:	9a f0       	brmi	.+38     	; 0xeea <__mulsf3_pse+0x88>
 ec4:	f1 f0       	breq	.+60     	; 0xf02 <__mulsf3_pse+0xa0>
 ec6:	88 23       	and	r24, r24
 ec8:	4a f0       	brmi	.+18     	; 0xedc <__mulsf3_pse+0x7a>
 eca:	ee 0f       	add	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	bb 1f       	adc	r27, r27
 ed0:	66 1f       	adc	r22, r22
 ed2:	77 1f       	adc	r23, r23
 ed4:	88 1f       	adc	r24, r24
 ed6:	91 50       	subi	r25, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	a9 f7       	brne	.-22     	; 0xec6 <__mulsf3_pse+0x64>
 edc:	9e 3f       	cpi	r25, 0xFE	; 254
 ede:	51 05       	cpc	r21, r1
 ee0:	80 f0       	brcs	.+32     	; 0xf02 <__mulsf3_pse+0xa0>
 ee2:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 ee6:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 eea:	5f 3f       	cpi	r21, 0xFF	; 255
 eec:	e4 f3       	brlt	.-8      	; 0xee6 <__mulsf3_pse+0x84>
 eee:	98 3e       	cpi	r25, 0xE8	; 232
 ef0:	d4 f3       	brlt	.-12     	; 0xee6 <__mulsf3_pse+0x84>
 ef2:	86 95       	lsr	r24
 ef4:	77 95       	ror	r23
 ef6:	67 95       	ror	r22
 ef8:	b7 95       	ror	r27
 efa:	f7 95       	ror	r31
 efc:	e7 95       	ror	r30
 efe:	9f 5f       	subi	r25, 0xFF	; 255
 f00:	c1 f7       	brne	.-16     	; 0xef2 <__mulsf3_pse+0x90>
 f02:	fe 2b       	or	r31, r30
 f04:	88 0f       	add	r24, r24
 f06:	91 1d       	adc	r25, r1
 f08:	96 95       	lsr	r25
 f0a:	87 95       	ror	r24
 f0c:	97 f9       	bld	r25, 7
 f0e:	08 95       	ret

00000f10 <eeprom_read_byte>:
 f10:	f9 99       	sbic	0x1f, 1	; 31
 f12:	fe cf       	rjmp	.-4      	; 0xf10 <eeprom_read_byte>
 f14:	92 bd       	out	0x22, r25	; 34
 f16:	81 bd       	out	0x21, r24	; 33
 f18:	f8 9a       	sbi	0x1f, 0	; 31
 f1a:	99 27       	eor	r25, r25
 f1c:	80 b5       	in	r24, 0x20	; 32
 f1e:	08 95       	ret

00000f20 <eeprom_write_byte>:
 f20:	26 2f       	mov	r18, r22

00000f22 <eeprom_write_r18>:
 f22:	f9 99       	sbic	0x1f, 1	; 31
 f24:	fe cf       	rjmp	.-4      	; 0xf22 <eeprom_write_r18>
 f26:	1f ba       	out	0x1f, r1	; 31
 f28:	92 bd       	out	0x22, r25	; 34
 f2a:	81 bd       	out	0x21, r24	; 33
 f2c:	20 bd       	out	0x20, r18	; 32
 f2e:	0f b6       	in	r0, 0x3f	; 63
 f30:	f8 94       	cli
 f32:	fa 9a       	sbi	0x1f, 2	; 31
 f34:	f9 9a       	sbi	0x1f, 1	; 31
 f36:	0f be       	out	0x3f, r0	; 63
 f38:	01 96       	adiw	r24, 0x01	; 1
 f3a:	08 95       	ret

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
